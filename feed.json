{
    "version": "https://jsonfeed.org/version/1",
    "title": "白衫如初",
    "description": "",
    "home_page_url": "https://hxfcoy.github.io/xcll.github.io",
    "feed_url": "https://hxfcoy.github.io/xcll.github.io/feed.json",
    "user_comment": "",
    "icon": "https://hxfcoy.github.io/xcll.github.io/media/website/LOGO.4a06cdd2.png",
    "author": {
        "name": "fcoy"
    },
    "items": [
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/ruan-jian.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/ruan-jian.html",
            "title": "软件",
            "content_html": "<p>QQNT 插件加载器<a href=\"https://github.com/LiteLoaderQQNT/LiteLoaderQQNT\">LiteLoaderQQNT</a></p>\n<p>基于QQ的全自动签到模块<a href=\"https://github.com/LuckyPray/XAutoDaily\">XAutoDaily</a></p>\n<p>QQXposed 模块<a href=\"https://github.com/cinit/QAuxiliary\">QAuxiliary</a></p>\n<p><a href=\"https://github.com/clash-verge-rev/clash-verge-rev\">clash-verge-rev</a></p>\n<p>蔚蓝档案自动化<a href=\"https://github.com/pur1fying/blue_archive_auto_script\">baas</a></p>\n<p>Bili动态抽奖助手<a href=\"https://github.com/shanmiteko/LotteryAutoScript\">LotteryAutoScript</a></p>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
            ],
            "date_published": "2024-08-10T08:00:21+08:00",
            "date_modified": "2024-08-10T08:00:21+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/steamyou-xi.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/steamyou-xi.html",
            "title": "Steam游戏",
            "content_html": "<p><a href=\"https://steamcommunity.com/profiles/76561199206989349/\">我的steam😀</a></p>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "游戏"
            ],
            "date_published": "2024-08-10T07:35:01+08:00",
            "date_modified": "2024-08-10T07:35:01+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/3-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/3-wu-chong-fu-zi-fu-de-zui-chang-zi-chuan.html",
            "title": "3. 无重复字符的最长子串",
            "content_html": "<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长 </strong><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">子串</span><span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">的长度。</span></p>\n<p> </p>\n<p><strong>示例 1:</strong></p>\n<pre><strong>输入: </strong>s = \"abcabcbb\"\n<strong>输出: </strong>3 \n<strong>解释:</strong> 因为无重复字符的最长子串是 <code>\"abc\"</code>，所以其长度为 3。</pre>\n<p><strong>示例 2:</strong></p>\n<pre><strong>输入: </strong>s = \"bbbbb\"\n<strong>输出: </strong>1\n<strong>解释: </strong>因为无重复字符的最长子串是 <code>\"b\"</code>，所以其长度为 1。</pre>\n<p><strong>示例 3:</strong></p>\n<pre><strong>输入: </strong>s = \"pwwkew\"\n<strong>输出: </strong>3\n<strong>解释: </strong>因为无重复字符的最长子串是 <code>\"wke\"</code>，所以其长度为 3。   请注意，你的答案必须是 <strong>子串 </strong>的长度，<code style=\"font-size: 0.790123em; font-weight: var(--font-weight-normal); font-family: var(--font-monospace); background-image: none;\">\"pwke\"</code><span style=\"background-color: var(--gray-1); font-size: 0.790123em; color: var(--text-primary-color); font-family: var(--editor-font-family); font-weight: var(--font-weight-normal);\"> 是一个</span><em style=\"font-size: 0.790123em; color: var(--text-primary-color); font-family: var(--editor-font-family); font-weight: var(--font-weight-normal);\">子序列，</em><span style=\"background-color: var(--gray-1); font-size: 0.790123em; color: var(--text-primary-color); font-family: var(--editor-font-family); font-weight: var(--font-weight-normal);\">不是子串。</span></pre>\n<pre class=\"language-c\"><code>int lengthOfLongestSubstring(char* s) {\n    int n = strlen(s);\n    if (n == 0) return 0;\n    \n    int maxLength = 0;\n    int start = 0;\n    int charIndex[128];  // ASCII 字符总数为128\n    \n    // 初始化charIndex数组，-1表示未出现过\n    for (int i = 0; i &lt; 128; i++) {\n        charIndex[i] = -1;\n    }\n    \n    for (int end = 0; end &lt; n; end++) {\n        char currentChar = s[end];\n        // 如果当前字符之前已经在窗口中出现过，移动start指针\n        if (charIndex[currentChar] &gt;= start) {\n            start = charIndex[currentChar] + 1;\n        }\n        \n        // 更新字符的最新出现位置\n        charIndex[currentChar] = end;\n        \n        // 更新最大长度\n        int currentLength = end - start + 1;\n        if (currentLength &gt; maxLength) {\n            maxLength = currentLength;\n        }\n    }\n    \n    return maxLength;\n}</code></pre>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-10T07:17:31+08:00",
            "date_modified": "2024-08-10T07:18:05+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/2-liang-shu-xiang-jia.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/2-liang-shu-xiang-jia.html",
            "title": "2. 两数相加",
            "content_html": "<p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p>\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p> </p>\n<p><strong class=\"example\">示例 1：</strong></p>\n<p><img loading=\"lazy\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\" alt=\"\" data-is-external-image=\"true\"></p>\n<pre><strong>输入：</strong>l1 = [2,4,3], l2 = [5,6,4]\n<strong>输出：</strong>[7,0,8]\n<strong>解释：</strong>342 + 465 = 807.\n</pre>\n<p><strong class=\"example\">示例 2：</strong></p>\n<pre><strong>输入：</strong>l1 = [0], l2 = [0]\n<strong>输出：</strong>[0]\n</pre>\n<p><strong class=\"example\">示例 3：</strong></p>\n<pre><strong>输入：</strong>l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n<strong>输出：</strong>[8,9,9,9,0,0,0,1]</pre>\n<p> </p>\n<pre class=\"language-c\"><code>struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\n    struct ListNode dummy;\n    dummy.next = NULL;\n    struct ListNode* current = &amp;dummy;\n    int carry = 0;\n\n    // 遍历两个链表，直到所有的节点处理完毕\n    while (l1 != NULL || l2 != NULL) {\n        // 获取当前节点的值，如果当前链表结束则用0代替\n        int val1 = (l1 != NULL) ? l1-&gt;val : 0;\n        int val2 = (l2 != NULL) ? l2-&gt;val : 0;\n        \n        // 计算当前位的和以及进位\n        int total = val1 + val2 + carry;\n        carry = total / 10;\n        int currentSum = total % 10;\n        \n        // 将计算的当前位加入结果链表\n        current-&gt;next = (struct ListNode*)malloc(sizeof(struct ListNode));\n        current-&gt;next-&gt;val = currentSum;\n        current-&gt;next-&gt;next = NULL;\n        current = current-&gt;next;\n        \n        // 移动指针\n        if (l1 != NULL) l1 = l1-&gt;next;\n        if (l2 != NULL) l2 = l2-&gt;next;\n    }\n    \n    // 如果最后有进位，添加一个新的节点\n    if (carry &gt; 0) {\n        current-&gt;next = (struct ListNode*)malloc(sizeof(struct ListNode));\n        current-&gt;next-&gt;val = carry;\n        current-&gt;next-&gt;next = NULL;\n    }\n    \n    // 返回结果链表的头结点\n    return dummy.next;\n}</code></pre>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-10T07:14:36+08:00",
            "date_modified": "2024-08-10T07:14:36+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/1-liang-shu-zhi-he.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/1-liang-shu-zhi-he.html",
            "title": "1. 两数之和",
            "content_html": "<p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值 </strong><em><code>target</code></em>  的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n<p> </p>\n<p><strong class=\"example\">示例 1：</strong></p>\n<pre><strong>输入：</strong>nums = [2,7,11,15], target = 9\n<strong>输出：</strong>[0,1]\n<strong>解释：</strong>因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n</pre>\n<p><strong class=\"example\">示例 2：</strong></p>\n<pre><strong>输入：</strong>nums = [3,2,4], target = 6\n<strong>输出：</strong>[1,2]\n</pre>\n<p><strong class=\"example\">示例 3：</strong></p>\n<pre><strong>输入：</strong>nums = [3,3], target = 6\n<strong>输出：</strong>[0,1]<code style=\"font-weight: var(--font-weight-normal);\"></code><code></code></pre>\n<pre class=\"language-c\"><code>int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n\n    // 用于存储结果的数组\n    int *result = (int *)malloc(2 * sizeof(int));\n    *returnSize = 2; // 结果数组的大小是2\n    // 遍历数组，寻找和为target的两个数\n    for (int i = 0; i &lt; numsSize; i++) {\n        for (int j = i + 1; j &lt; numsSize; j++) {\n            // 如果找到，返回它们的下标\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    // 如果未找到，返回NULL\n    *returnSize = 0;\n    return NULL;\n}</code></pre>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-10T07:10:58+08:00",
            "date_modified": "2024-08-10T07:15:36+08:00"
        }
    ]
}
