{
    "version": "https://jsonfeed.org/version/1",
    "title": "xcll’s blog",
    "description": "",
    "home_page_url": "https://hxfcoy.github.io/xcll.github.io",
    "feed_url": "https://hxfcoy.github.io/xcll.github.io/feed.json",
    "user_comment": "",
    "icon": "https://hxfcoy.github.io/xcll.github.io/media/website/image-removebg-preview.png",
    "author": {
        "name": "fcoy"
    },
    "items": [
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/389-zhao-bu-tong.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/389-zhao-bu-tong.html",
            "title": "389. 找不同",
            "content_html": "<p>给定两个字符串 <code>s</code> 和 <code>t</code> ，它们只包含小写字母。</p>\n<p>字符串 <code>t</code> 由字符串 <code>s</code> 随机重排，然后在随机位置添加一个字母。</p>\n<p>请找出在 <code>t</code> 中被添加的字母。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>s = \"abcd\", t = \"abcde\"\n<strong>输出：</strong>\"e\"\n<strong>解释：</strong>'e' 是那个被添加的字母。\n</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>s = \"\", t = \"y\"\n<strong>输出：</strong>\"y\"</pre>\n<pre class=\"language-c line-numbers\"><code>char findTheDifference(char* s, char* t) {\n    int sum_s = 0, sum_t = 0;\n\n    // 计算字符串 s 的 ASCII 码总和\n    while (*s) {\n        sum_s += *s;\n        s++;\n    }\n\n    // 计算字符串 t 的 ASCII 码总和\n    while (*t) {\n        sum_t += *t;\n        t++;\n    }\n\n    // 返回两者之差，即被添加的字符\n    return sum_t - sum_s;\n}\n</code></pre>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-09-02T07:44:38+08:00",
            "date_modified": "2024-09-02T07:44:38+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/lcr-144-fan-zhuan-er-cha-shu.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/lcr-144-fan-zhuan-er-cha-shu.html",
            "title": "LCR 144. 翻转二叉树",
            "content_html": "<p>给定一棵二叉树的根节点 <code>root</code>，请左右翻转这棵二叉树，并返回其根节点。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<p><img loading=\"lazy\" src=\"https://pic.leetcode.cn/1694686821-qlvjod-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91.png\" alt=\"\" data-is-external-image=\"true\"></p>\n<pre><strong>输入：</strong>root = [5,7,9,8,3,2,4]\n<strong>输出：</strong>[5,9,7,4,2,3,8]</pre>\n<pre class=\"language-c line-numbers\"><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\nstruct TreeNode* mirrorTree(struct TreeNode* root) {\n    if (root == NULL) {\n        return NULL;\n    }\n    \n    // 递归翻转左右子树\n    struct TreeNode* left = mirrorTree(root-&gt;left);\n    struct TreeNode* right = mirrorTree(root-&gt;right);\n    \n    // 交换左右子树\n    root-&gt;left = right;\n    root-&gt;right = left;\n    \n    return root;\n}\n\n// 辅助函数：创建新节点\nstruct TreeNode* newNode(int val) {\n    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));\n    node-&gt;val = val;\n    node-&gt;left = NULL;\n    node-&gt;right = NULL;\n    return node;\n}\n\n// 辅助函数：中序遍历并打印树\nvoid inorderTraversal(struct TreeNode* root) {\n    if (root == NULL) {\n        return;\n    }\n    inorderTraversal(root-&gt;left);\n    printf(\"%d \", root-&gt;val);\n    inorderTraversal(root-&gt;right);\n}</code></pre>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-30T07:25:00+08:00",
            "date_modified": "2024-08-30T07:25:00+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/1309-jie-ma-zi-mu-dao-zheng-shu-ying-she.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/1309-jie-ma-zi-mu-dao-zheng-shu-ying-she.html",
            "title": "1309. 解码字母到整数映射",
            "content_html": "<p>给你一个字符串 <code>s</code>，它由数字（<code>'0'</code> - <code>'9'</code>）和 <code>'#'</code> 组成。我们希望按下述规则将 <code>s</code> 映射为一些小写英文字符：</p>\n<ul>\n<li>字符（<code>'a'</code> - <code>'i'</code>）分别用（<code>'1'</code> - <code>'9'</code>）表示。</li>\n<li>字符（<code>'j'</code> - <code>'z'</code>）分别用（<code>'10#'</code> - <code>'26#'</code>）表示。 </li>\n</ul>\n<p>返回映射之后形成的新字符串。</p>\n<p>题目数据保证映射始终唯一。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>s = \"10#11#12\"\n<strong>输出：</strong>\"jkab\"\n<strong>解释：</strong>\"j\" -&gt; \"10#\" , \"k\" -&gt; \"11#\" , \"a\" -&gt; \"1\" , \"b\" -&gt; \"2\".\n</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>s = \"1326#\"\n<strong>输出：</strong>\"acz\"\n</pre>\n<pre class=\"language-c line-numbers\"><code>char* freqAlphabets(char* s) {\n    int len = strlen(s);\n    // 结果字符串的最大长度\n    char* result = (char*)malloc(len + 1);\n    int j = 0;\n\n    for (int i = 0; i &lt; len;) {\n        // 如果当前字符后两位存在并且是'#'，则处理成 '10#' - '26#'\n        if (i + 2 &lt; len &amp;&amp; s[i + 2] == '#') {\n            int num = (s[i] - '0') * 10 + (s[i + 1] - '0');\n            result[j++] = 'a' + num - 1;\n            i += 3; // 跳过当前的三位\n        } else {\n            // 处理 '1' - '9'\n            result[j++] = 'a' + (s[i] - '0') - 1;\n            i++;\n        }\n    }\n\n    result[j] = '\\0'; // 终止字符串\n    return result;\n}</code></pre>\n<ul>\n<li>从字符串的末尾开始扫描，查找带有 <code>#</code> 的部分，并将这些部分转换为相应的字母。</li>\n<li>如果当前位置的字符没有 <code>#</code>，那么直接将其转换为对应的字母。</li>\n<li>遇到 <code>#</code> 时，处理前两个字符（即数字部分），将其映射为相应的字母。</li>\n</ul>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-29T07:38:33+08:00",
            "date_modified": "2024-08-29T07:38:33+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/225-yong-dui-lie-shi-xian-zhan.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/225-yong-dui-lie-shi-xian-zhan.html",
            "title": "225. 用队列实现栈",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i6cit80c7\">题目</a></li>\n<li><a href=\"#mcetoc_1i6cit80c8\">代码</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i6cit80c7\">题目</h3>\n<p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p>\n<p>实现 <code>MyStack</code> 类：</p>\n<ul>\n<li><code>void push(int x)</code> 将元素 x 压入栈顶。</li>\n<li><code>int pop()</code> 移除并返回栈顶元素。</li>\n<li><code>int top()</code> 返回栈顶元素。</li>\n<li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\n</ul>\n<p> </p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>你只能使用队列的标准操作 —— 也就是 <code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和 <code>is empty</code> 这些操作。</li>\n<li>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li>\n</ul>\n<p> </p>\n<p><strong>示例：</strong></p>\n<pre><strong>输入：</strong>\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\n<strong>输出：</strong>\n[null, null, null, 2, 2, false]\n\n<strong>解释：</strong>\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // 返回 2\nmyStack.pop(); // 返回 2\nmyStack.empty(); // 返回 False\n</pre>\n<h3 id=\"mcetoc_1i6cit80c8\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>typedef struct {\n    int data[100]; // 假设栈最大存储100个元素\n    int front;\n    int rear;\n} Queue;\n\ntypedef struct {\n    Queue* queue1;\n    Queue* queue2;\n} MyStack;\n\n// 创建一个队列\nQueue* createQueue() {\n    Queue* queue = (Queue*)malloc(sizeof(Queue));\n    queue-&gt;front = 0;\n    queue-&gt;rear = 0;\n    return queue;\n}\n\n// 判断队列是否为空\nbool isEmpty(Queue* queue) { return queue-&gt;front == queue-&gt;rear; }\n\n// 队列的入队操作\nvoid enqueue(Queue* queue, int x) { queue-&gt;data[queue-&gt;rear++] = x; }\n\n// 队列的出队操作\nint dequeue(Queue* queue) { return queue-&gt;data[queue-&gt;front++]; }\n\n// 获取队列的队头元素\nint front(Queue* queue) { return queue-&gt;data[queue-&gt;front]; }\n\n// 创建栈\nMyStack* myStackCreate() {\n    MyStack* stack = (MyStack*)malloc(sizeof(MyStack));\n    stack-&gt;queue1 = createQueue();\n    stack-&gt;queue2 = createQueue();\n    return stack;\n}\n\n// 压入栈操作\nvoid myStackPush(MyStack* obj, int x) {\n    enqueue(obj-&gt;queue2, x);\n    while (!isEmpty(obj-&gt;queue1)) {\n        enqueue(obj-&gt;queue2, dequeue(obj-&gt;queue1));\n    }\n    // 交换queue1和queue2\n    Queue* temp = obj-&gt;queue1;\n    obj-&gt;queue1 = obj-&gt;queue2;\n    obj-&gt;queue2 = temp;\n}\n\n// 弹出栈顶元素\nint myStackPop(MyStack* obj) { return dequeue(obj-&gt;queue1); }\n\n// 获取栈顶元素\nint myStackTop(MyStack* obj) { return front(obj-&gt;queue1); }\n\n// 判断栈是否为空\nbool myStackEmpty(MyStack* obj) { return isEmpty(obj-&gt;queue1); }\n\n// 释放栈资源\nvoid myStackFree(MyStack* obj) {\n    free(obj-&gt;queue1);\n    free(obj-&gt;queue2);\n    free(obj);\n}</code></pre>\n<p> </p>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-28T21:30:59+08:00",
            "date_modified": "2024-08-28T21:30:59+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/598-qu-jian-jia-fa-ii.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/598-qu-jian-jia-fa-ii.html",
            "title": "598. 区间加法 II",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i68g59h010\">题目</a></li>\n<li><a href=\"#mcetoc_1i68g59h011\">代码</a></li>\n<li><a href=\"#mcetoc_1i68g59h012\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i68g59h010\">题目</h3>\n<p>给你一个 <code>m x n</code> 的矩阵 <code>M</code><strong> </strong>和一个操作数组 <code>op</code> 。矩阵初始化时所有的单元格都为 <code>0</code> 。<code>ops[i] = [ai, bi]</code> 意味着当所有的 <code>0 &lt;= x &lt; ai</code> 和 <code>0 &lt;= y &lt; bi</code> 时， <code>M[x][y]</code> 应该加 1。</p>\n<p>在 <em>执行完所有操作后</em> ，计算并返回 <em>矩阵中最大整数的个数</em> 。</p>\n<p> </p>\n<p><strong>示例 1:</strong></p>\n<p><img loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/10/02/ex1.jpg\" alt=\"\" data-is-external-image=\"true\"></p>\n<pre><strong>输入:</strong> m = 3, n = 3，ops = [[2,2],[3,3]]\n<strong>输出:</strong> 4\n<strong>解释:</strong> M 中最大的整数是 2, 而且 M 中有4个值为2的元素。因此返回 4。\n</pre>\n<p><strong>示例 2:</strong></p>\n<pre><strong>输入:</strong> m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\n<strong>输出:</strong> 4\n</pre>\n<p><strong>示例 3:</strong></p>\n<pre><strong>输入:</strong> m = 3, n = 3, ops = []\n<strong>输出:</strong> 9</pre>\n<h3 id=\"mcetoc_1i68g59h011\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>int maxCount(int m, int n, int** ops, int opsSize, int* opsColSize) {\n    int minA = m;\n    int minB = n;\n    \n    for (int i = 0; i &lt; opsSize; i++) {\n        if (ops[i][0] &lt; minA) {\n            minA = ops[i][0];\n        }\n        if (ops[i][1] &lt; minB) {\n            minB = ops[i][1];\n        }\n    }\n    \n    return minA * minB;\n}</code></pre>\n<h3 id=\"mcetoc_1i68g59h012\">解释</h3>\n<p>可以通过数学的方法来解决，而不需要真正构建整个矩阵。每次操作 <code>[ai, bi]</code> 会影响到矩阵左上角大小为 <code>ai x bi</code> 的子矩阵，使得这个子矩阵中的所有元素都加 1。矩阵中最大整数的值必定出现在所有操作影响的最小范围内，即所有 <code>[ai, bi]</code> 中的最小 <code>ai</code> 和最小 <code>bi</code> 组成的子矩阵。</p>\n<p>因此，最大整数的个数就是最小 <code>ai</code> 和最小 <code>bi</code> 的乘积。</p>\n<ol>\n<li>初始化 <code>minA = m</code> 和 <code>minB = n</code>。</li>\n<li>遍历操作数组 <code>ops</code>，对于每个操作 <code>[ai, bi]</code>：\n<ul>\n<li>更新 <code>minA = min(minA, ai)</code>。</li>\n<li>更新 <code>minB = min(minB, bi)</code>。</li>\n</ul>\n</li>\n<li>最后，最大整数的个数就是 <code>minA * minB</code>。</li>\n</ol>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-27T07:25:59+08:00",
            "date_modified": "2024-08-27T07:25:59+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/1185-yi-zhou-zhong-de-di-ji-tian.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/1185-yi-zhou-zhong-de-di-ji-tian.html",
            "title": "1185. 一周中的第几天",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i63ae54o30\">题目</a></li>\n<li><a href=\"#mcetoc_1i63ae54o31\">代码</a></li>\n<li><a href=\"#mcetoc_1i63ae54o32\">蔡勒公式</a></li>\n<li><a href=\"#mcetoc_1i63ae54o33\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i63ae54o30\">题目</h3>\n<p>给你一个日期，请你设计一个算法来判断它是对应一周中的哪一天。</p>\n<p>输入为三个整数：<code>day</code>、<code>month</code> 和 <code>year</code>，分别表示日、月、年。</p>\n<p>您返回的结果必须是这几个值中的一个 <code>{\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}</code>。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>day = 31, month = 8, year = 2019\n<strong>输出：</strong>\"Saturday\"\n</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>day = 18, month = 7, year = 1999\n<strong>输出：</strong>\"Sunday\"\n</pre>\n<p><strong>示例 3：</strong></p>\n<pre><strong>输入：</strong>day = 15, month = 8, year = 1993\n<strong>输出：</strong>\"Sunday\"</pre>\n<p> </p>\n<h3 id=\"mcetoc_1i63ae54o31\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>char* dayOfTheWeek(int day, int month, int year) {\n    // 如果月份是1月或2月，将月份变为上一年的13月或14月\n    if (month == 1 || month == 2) {\n        month += 12;\n        year -= 1;\n    }\n    \n    int K = year % 100; // 年份的后两位\n    int J = year / 100; // 年份的前两位\n    \n    int h = (day + (13 * (month + 1)) / 5 + K + K / 4 + J / 4 + 5 * J) % 7;\n    \n    // 映射h的值到星期几\n    char* daysOfWeek[] = {\"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"};\n    \n    return daysOfWeek[h];\n}</code></pre>\n<h3 id=\"mcetoc_1i63ae54o32\">蔡勒公式</h3>\n<p>公式的具体形式为：<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://hxfcoy.github.io/xcll.github.io/media/posts/32/1.png\" alt=\"\" width=\"921\" height=\"634\" sizes=\"100vw\" srcset=\"https://hxfcoy.github.io/xcll.github.io/media/posts/32/responsive/1-xs.png 300w ,https://hxfcoy.github.io/xcll.github.io/media/posts/32/responsive/1-sm.png 480w ,https://hxfcoy.github.io/xcll.github.io/media/posts/32/responsive/1-md.png 768w ,https://hxfcoy.github.io/xcll.github.io/media/posts/32/responsive/1-lg.png 1024w ,https://hxfcoy.github.io/xcll.github.io/media/posts/32/responsive/1-xl.png 1360w ,https://hxfcoy.github.io/xcll.github.io/media/posts/32/responsive/1-2xl.png 1600w\"></figure>\n<h3 id=\"mcetoc_1i63ae54o33\">解释</h3>\n<ol>\n<li>\n<p><strong>月份调整</strong>：</p>\n<ul>\n<li>如果输入的月份是1月或2月，将其视为上一年的13月或14月（按照蔡勒公式），因此年份需要减1。</li>\n</ul>\n</li>\n<li>\n<p><strong>计算K和J</strong>：</p>\n<ul>\n<li><code>K</code>是年份的后两位数。</li>\n<li><code>J</code>是年份的前两位数。</li>\n</ul>\n</li>\n<li>\n<p><strong>蔡勒公式</strong>：</p>\n<ul>\n<li>使用公式计算出<code>h</code>，即从<code>0</code>到<code>6</code>之间的一个数，代表星期几。结果 <code>h</code> 对应的 <code>daysOfWeek</code> 数组的索引。</li>\n<li>数组 <code>daysOfWeek</code> 按照星期六到星期五的顺序保存了对应的字符串。</li>\n</ul>\n</li>\n<li>\n<p><strong>返回结果</strong>：</p>\n<ul>\n<li>根据计算出的<code>h</code>，返回对应的星期字符串。</li>\n</ul>\n</li>\n</ol>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-25T07:09:46+08:00",
            "date_modified": "2024-08-25T07:12:49+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/2578-zui-xiao-he-fen-ge.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/2578-zui-xiao-he-fen-ge.html",
            "title": "2578. 最小和分割",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i60qc4g3i\">题目</a></li>\n<li><a href=\"#mcetoc_1i60qc4g3j\">代码</a></li>\n<li><a href=\"#mcetoc_1i60qc4g3k\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i60qc4g3i\">题目</h3>\n<p>给你一个正整数 <code>num</code> ，请你将它分割成两个非负整数 <code>num1</code> 和 <code>num2</code> ，满足：</p>\n<ul>\n<li><code>num1</code> 和 <code>num2</code> 直接连起来，得到 <code>num</code> 各数位的一个排列。\n<ul>\n<li>换句话说，<code>num1</code> 和 <code>num2</code> 中所有数字出现的次数之和等于 <code>num</code> 中所有数字出现的次数。</li>\n</ul>\n</li>\n<li><code>num1</code> 和 <code>num2</code> 可以包含前导 0 。</li>\n</ul>\n<p>请你返回 <code>num1</code> 和 <code>num2</code> 可以得到的和的 <strong>最小</strong> 值。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li><code>num</code> 保证没有前导 0 。</li>\n<li><code>num1</code> 和 <code>num2</code> 中数位顺序可以与 <code>num</code> 中数位顺序不同。\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>num = 4325\n<strong>输出：</strong>59\n<strong>解释：</strong>我们可以将 4325 分割成 <code>num1 </code>= 24 和 <code>num2 </code>= 35 ，和为 59 ，59 是最小和。</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>num = 687\n<strong>输出：</strong>75\n<strong>解释：</strong>我们可以将 687 分割成 <code>num1</code> = 68 和 <code>num2 </code>= 7 ，和为最优值 75 。</pre>\n</li>\n</ul>\n<h3 id=\"mcetoc_1i60qc4g3j\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>int compare(const void *a, const void *b) {\n    return (*(char *)a - *(char *)b);\n}\n\nint splitNum(int num) {\n    char digits[12];  // 用于存储数字的各个字符（考虑到整数的长度最大为11位）\n    sprintf(digits, \"%d\", num);  // 将数字转换为字符串\n    int len = strlen(digits);    // 获取字符串长度\n\n    // 对字符数组进行排序\n    qsort(digits, len, sizeof(char), compare);\n\n    char num1[12] = {0};  // 存储结果num1\n    char num2[12] = {0};  // 存储结果num2\n    int idx1 = 0, idx2 = 0;\n\n    // 交替分配字符给num1和num2\n    for (int i = 0; i &lt; len; i++) {\n        if (i % 2 == 0) {\n            num1[idx1++] = digits[i];\n        } else {\n            num2[idx2++] = digits[i];\n        }\n    }\n\n    // 将num1和num2转换为整数并返回它们的和\n    return atoi(num1) + atoi(num2);\n}</code></pre>\n<h3 id=\"mcetoc_1i60qc4g3k\">解释</h3>\n<ol>\n<li>\n<p><strong><code>compare</code>函数</strong>:</p>\n<ul>\n<li>这是用于<code>qsort</code>函数的比较器函数，用于按升序排序字符。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>splitNum</code>函数</strong>:</p>\n<ul>\n<li><code>digits</code>：将数字转换成字符串后，存储它的各个位。</li>\n<li><code>qsort</code>：对字符数组进行排序。</li>\n<li><code>num1</code>和<code>num2</code>：用于存储结果数字的字符串。</li>\n<li><code>idx1</code>和<code>idx2</code>：分别用于<code>num1</code>和<code>num2</code>的索引。</li>\n<li>最后将<code>num1</code>和<code>num2</code>转换为整数，并返回它们的和。</li>\n</ul>\n</li>\n</ol>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-24T07:50:33+08:00",
            "date_modified": "2024-08-24T07:50:33+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/2553-fen-ge-shu-zu-zhong-shu-zi-de-shu-wei.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/2553-fen-ge-shu-zu-zhong-shu-zi-de-shu-wei.html",
            "title": "2553. 分割数组中数字的数位",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i5u7hhce7\">题目</a></li>\n<li><a href=\"#mcetoc_1i5u7hhce8\">代码</a></li>\n<li><a href=\"#mcetoc_1i5u7i7g9c\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i5u7hhce7\">题目</h3>\n<p>给你一个正整数数组 <code>nums</code> ，请你返回一个数组<em> </em><code>answer</code> ，你需要将 <code>nums</code> 中每个整数进行数位分割后，按照 <code>nums</code> 中出现的 <strong>相同顺序</strong> 放入答案数组中。</p>\n<p>对一个整数进行数位分割，指的是将整数各个数位按原本出现的顺序排列成数组。</p>\n<ul>\n<li>比方说，整数 <code>10921</code> ，分割它的各个数位得到 <code>[1,0,9,2,1]</code> 。</li>\n</ul>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>nums = [13,25,83,77]\n<strong>输出：</strong>[1,3,2,5,8,3,7,7]\n<strong>解释：</strong>\n- 分割 13 得到 [1,3] 。\n- 分割 25 得到 [2,5] 。\n- 分割 83 得到 [8,3] 。\n- 分割 77 得到 [7,7] 。\nanswer = [1,3,2,5,8,3,7,7] 。answer 中的数字分割结果按照原数字在数组中的相同顺序排列。\n</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>nums = [7,1,3,9]\n<strong>输出：</strong>[7,1,3,9]\n<strong>解释：</strong>nums 中每个整数的分割是它自己。\nanswer = [7,1,3,9] 。</pre>\n<h3 id=\"mcetoc_1i5u7hhce8\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>int countDigits(int num) {\n    int count = 0;\n    while (num != 0) {\n        num /= 10;\n        count++;\n    }\n    return count;\n}\n\n// 将整数 num 的各个数位分割并存储到 result 数组中\nvoid splitDigits(int num, int* result, int* index) {\n    int digits[10];\n    int i = 0;\n    \n    // 提取各个位数并存储到临时数组 digits 中\n    do {\n        digits[i++] = num % 10;\n        num /= 10;\n    } while (num &gt; 0);\n\n    // 将各位数按照正确的顺序存入 result 数组\n    while (i &gt; 0) {\n        result[(*index)++] = digits[--i];\n    }\n}\n\nint* separateDigits(int* nums, int numsSize, int* returnSize) {\n    // 计算分割后的总数位数量\n    int totalDigits = 0;\n    for (int i = 0; i &lt; numsSize; i++) {\n        totalDigits += countDigits(nums[i]);\n    }\n\n    // 分配存储结果的数组\n    int* result = (int*)malloc(totalDigits * sizeof(int));\n    *returnSize = totalDigits;\n\n    int index = 0;\n    for (int i = 0; i &lt; numsSize; i++) {\n        splitDigits(nums[i], result, &amp;index);\n    }\n\n    return result;\n}</code></pre>\n<h3 id=\"mcetoc_1i5u7i7g9c\">解释</h3>\n<ol>\n<li><strong>countDigits</strong> 函数用于计算一个整数的位数。</li>\n<li><strong>splitDigits</strong> 函数将整数的各个数位分割，并按顺序存储到结果数组中。</li>\n<li><strong>separateDigits</strong> 函数是核心函数，它调用 <code>countDigits</code> 计算所有数位的总和以分配结果数组的大小，然后调用 <code>splitDigits</code> 将每个整数分割并按顺序存储。</li>\n</ol>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-23T07:43:21+08:00",
            "date_modified": "2024-08-23T07:43:21+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/724-xun-zhao-shu-zu-de-zhong-xin-xia-biao.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/724-xun-zhao-shu-zu-de-zhong-xin-xia-biao.html",
            "title": "724. 寻找数组的中心下标",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i5srl6ett\">题目</a></li>\n<li><a href=\"#mcetoc_1i5srl6etu\">代码</a></li>\n<li><a href=\"#mcetoc_1i5srl6etv\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i5srl6ett\">题目</h3>\n<p>给你一个整数数组 <code>nums</code> ，请计算数组的 <strong>中心下标 </strong>。</p>\n<p>数组<strong> 中心下标</strong><strong> </strong>是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p>\n<p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code> ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p>\n<p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>nums = [1, 7, 3, 6, 5, 6]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n中心下标是 3 。\n左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，\n右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。\n</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>nums = [1, 2, 3]\n<strong>输出：</strong>-1\n<strong>解释：</strong>\n数组中不存在满足此条件的中心下标。</pre>\n<p><strong>示例 3：</strong></p>\n<pre><strong>输入：</strong>nums = [2, 1, -1]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n中心下标是 0 。\n左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。</pre>\n<h3 id=\"mcetoc_1i5srl6etu\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>int pivotIndex(int* nums, int numsSize) {\n    int totalSum = 0;\n    for (int i = 0; i &lt; numsSize; i++) {\n        totalSum += nums[i];\n    }\n    \n    int leftSum = 0;\n    for (int i = 0; i &lt; numsSize; i++) {\n        if (leftSum == totalSum - leftSum - nums[i]) {\n            return i;\n        }\n        leftSum += nums[i];\n    }\n    \n    return -1;\n}</code></pre>\n<h3 id=\"mcetoc_1i5srl6etv\">解释</h3>\n<ol>\n<li><strong>总和计算</strong>：首先通过遍历数组来计算 <code>totalSum</code>。</li>\n<li><strong>遍历数组</strong>：我们用 <code>leftSum</code> 来表示当前下标 <code>i</code> 左边所有元素的和。</li>\n<li><strong>中心下标判断</strong>：对于每一个下标 <code>i</code>，判断 <code>leftSum</code> 是否等于右侧元素的和（<code>totalSum - leftSum - nums[i]</code>），如果是，则返回 <code>i</code>。</li>\n<li><strong>继续更新 <code>leftSum</code></strong>：在判断完之后，我们把当前元素加到 <code>leftSum</code> 中，以便下一个下标使用。</li>\n</ol>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-22T18:56:01+08:00",
            "date_modified": "2024-08-22T18:56:01+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/2144-da-zhe-gou-mai-tang-guo-de-zui-xiao-kai-xiao.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/2144-da-zhe-gou-mai-tang-guo-de-zui-xiao-kai-xiao.html",
            "title": "2144. 打折购买糖果的最小开销",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i5p1e3qur\">题目</a></li>\n<li><a href=\"#mcetoc_1i5p1e3qus\">代码</a></li>\n<li><a href=\"#mcetoc_1i5p1e3qut\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i5p1e3qur\">题目</h3>\n<p>一家商店正在打折销售糖果。每购买 <strong>两个</strong> 糖果，商店会 <strong>免费</strong> 送一个糖果。</p>\n<p>免费送的糖果唯一的限制是：它的价格需要小于等于购买的两个糖果价格的 <strong>较小值</strong> 。</p>\n<ul>\n<li>比方说，总共有 <code>4</code> 个糖果，价格分别为 <code>1</code> ，<code>2</code> ，<code>3</code> 和 <code>4</code> ，一位顾客买了价格为 <code>2</code> 和 <code>3</code> 的糖果，那么他可以免费获得价格为 <code>1</code> 的糖果，但不能获得价格为 <code>4</code> 的糖果。</li>\n</ul>\n<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 表示第 <code>i</code> 个糖果的价格，请你返回获得 <strong>所有</strong> 糖果的 <strong>最小</strong> 总开销。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>cost = [1,2,3]\n<strong>输出：</strong>5\n<strong>解释：</strong>我们购买价格为 2 和 3 的糖果，然后免费获得价格为 1 的糖果。\n总开销为 2 + 3 = 5 。这是开销最小的 <strong>唯一</strong> 方案。\n注意，我们不能购买价格为 1 和 3 的糖果，并免费获得价格为 2 的糖果。\n这是因为免费糖果的价格必须小于等于购买的 2 个糖果价格的较小值。\n</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>cost = [6,5,7,9,2,2]\n<strong>输出：</strong>23\n<strong>解释：</strong>最小总开销购买糖果方案为：\n- 购买价格为 9 和 7 的糖果\n- 免费获得价格为 6 的糖果\n- 购买价格为 5 和 2 的糖果\n- 免费获得价格为 2 的最后一个糖果\n因此，最小总开销为 9 + 7 + 5 + 2 = 23 。\n</pre>\n<p><strong>示例 3：</strong></p>\n<pre><strong>输入：</strong>cost = [5,5]\n<strong>输出：</strong>10\n<strong>解释：</strong>由于只有 2 个糖果，我们需要将它们都购买，而且没有免费糖果。\n所以总最小开销为 5 + 5 = 10 。</pre>\n<h3 id=\"mcetoc_1i5p1e3qus\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>// 比较函数，用于qsort排序\nint compare(const void* a, const void* b) {\n    return *(int*)b - *(int*)a; // 从大到小排序\n}\n\nint minimumCost(int* cost, int costSize) {\n    // 按价格从大到小排序\n    qsort(cost, costSize, sizeof(int), compare);\n    \n    int totalCost = 0;\n    \n    // 遍历所有糖果，每次取3个\n    for (int i = 0; i &lt; costSize; i++) {\n        // 只累加前两个糖果的价格，第三个糖果免费\n        if (i % 3 != 2) {\n            totalCost += cost[i];\n        }\n    }\n    \n    return totalCost;\n}</code></pre>\n<h3 id=\"mcetoc_1i5p1e3qut\">解释</h3>\n<ol>\n<li><strong>排序</strong>：<code>qsort</code>函数将糖果价格从高到低排序。</li>\n<li><strong>遍历</strong>：在循环中，通过 <code>i % 3 != 2</code> 来判断是否是每组中的第三个糖果，若是，则跳过它（因为它是免费的）。</li>\n<li><strong>累加价格</strong>：每组前两个糖果的价格累加到 <code>totalCost</code> 中。</li>\n</ol>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-21T07:20:03+08:00",
            "date_modified": "2024-08-21T07:20:03+08:00"
        }
    ]
}
