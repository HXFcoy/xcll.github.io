{
    "version": "https://jsonfeed.org/version/1",
    "title": "xcll’s blog",
    "description": "",
    "home_page_url": "https://hxfcoy.github.io/xcll.github.io",
    "feed_url": "https://hxfcoy.github.io/xcll.github.io/feed.json",
    "user_comment": "",
    "icon": "https://hxfcoy.github.io/xcll.github.io/media/website/image-removebg-preview.png",
    "author": {
        "name": "fcoy"
    },
    "items": [
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/2578-zui-xiao-he-fen-ge.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/2578-zui-xiao-he-fen-ge.html",
            "title": "2578. 最小和分割",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i60qc4g3i\">题目</a></li>\n<li><a href=\"#mcetoc_1i60qc4g3j\">代码</a></li>\n<li><a href=\"#mcetoc_1i60qc4g3k\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i60qc4g3i\">题目</h3>\n<p>给你一个正整数 <code>num</code> ，请你将它分割成两个非负整数 <code>num1</code> 和 <code>num2</code> ，满足：</p>\n<ul>\n<li><code>num1</code> 和 <code>num2</code> 直接连起来，得到 <code>num</code> 各数位的一个排列。\n<ul>\n<li>换句话说，<code>num1</code> 和 <code>num2</code> 中所有数字出现的次数之和等于 <code>num</code> 中所有数字出现的次数。</li>\n</ul>\n</li>\n<li><code>num1</code> 和 <code>num2</code> 可以包含前导 0 。</li>\n</ul>\n<p>请你返回 <code>num1</code> 和 <code>num2</code> 可以得到的和的 <strong>最小</strong> 值。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li><code>num</code> 保证没有前导 0 。</li>\n<li><code>num1</code> 和 <code>num2</code> 中数位顺序可以与 <code>num</code> 中数位顺序不同。\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>num = 4325\n<strong>输出：</strong>59\n<strong>解释：</strong>我们可以将 4325 分割成 <code>num1 </code>= 24 和 <code>num2 </code>= 35 ，和为 59 ，59 是最小和。</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>num = 687\n<strong>输出：</strong>75\n<strong>解释：</strong>我们可以将 687 分割成 <code>num1</code> = 68 和 <code>num2 </code>= 7 ，和为最优值 75 。</pre>\n</li>\n</ul>\n<h3 id=\"mcetoc_1i60qc4g3j\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>int compare(const void *a, const void *b) {\n    return (*(char *)a - *(char *)b);\n}\n\nint splitNum(int num) {\n    char digits[12];  // 用于存储数字的各个字符（考虑到整数的长度最大为11位）\n    sprintf(digits, \"%d\", num);  // 将数字转换为字符串\n    int len = strlen(digits);    // 获取字符串长度\n\n    // 对字符数组进行排序\n    qsort(digits, len, sizeof(char), compare);\n\n    char num1[12] = {0};  // 存储结果num1\n    char num2[12] = {0};  // 存储结果num2\n    int idx1 = 0, idx2 = 0;\n\n    // 交替分配字符给num1和num2\n    for (int i = 0; i &lt; len; i++) {\n        if (i % 2 == 0) {\n            num1[idx1++] = digits[i];\n        } else {\n            num2[idx2++] = digits[i];\n        }\n    }\n\n    // 将num1和num2转换为整数并返回它们的和\n    return atoi(num1) + atoi(num2);\n}</code></pre>\n<h3 id=\"mcetoc_1i60qc4g3k\">解释</h3>\n<ol>\n<li>\n<p><strong><code>compare</code>函数</strong>:</p>\n<ul>\n<li>这是用于<code>qsort</code>函数的比较器函数，用于按升序排序字符。</li>\n</ul>\n</li>\n<li>\n<p><strong><code>splitNum</code>函数</strong>:</p>\n<ul>\n<li><code>digits</code>：将数字转换成字符串后，存储它的各个位。</li>\n<li><code>qsort</code>：对字符数组进行排序。</li>\n<li><code>num1</code>和<code>num2</code>：用于存储结果数字的字符串。</li>\n<li><code>idx1</code>和<code>idx2</code>：分别用于<code>num1</code>和<code>num2</code>的索引。</li>\n<li>最后将<code>num1</code>和<code>num2</code>转换为整数，并返回它们的和。</li>\n</ul>\n</li>\n</ol>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-24T07:50:33+08:00",
            "date_modified": "2024-08-24T07:50:33+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/2553-fen-ge-shu-zu-zhong-shu-zi-de-shu-wei.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/2553-fen-ge-shu-zu-zhong-shu-zi-de-shu-wei.html",
            "title": "2553. 分割数组中数字的数位",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i5u7hhce7\">题目</a></li>\n<li><a href=\"#mcetoc_1i5u7hhce8\">代码</a></li>\n<li><a href=\"#mcetoc_1i5u7i7g9c\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i5u7hhce7\">题目</h3>\n<p>给你一个正整数数组 <code>nums</code> ，请你返回一个数组<em> </em><code>answer</code> ，你需要将 <code>nums</code> 中每个整数进行数位分割后，按照 <code>nums</code> 中出现的 <strong>相同顺序</strong> 放入答案数组中。</p>\n<p>对一个整数进行数位分割，指的是将整数各个数位按原本出现的顺序排列成数组。</p>\n<ul>\n<li>比方说，整数 <code>10921</code> ，分割它的各个数位得到 <code>[1,0,9,2,1]</code> 。</li>\n</ul>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>nums = [13,25,83,77]\n<strong>输出：</strong>[1,3,2,5,8,3,7,7]\n<strong>解释：</strong>\n- 分割 13 得到 [1,3] 。\n- 分割 25 得到 [2,5] 。\n- 分割 83 得到 [8,3] 。\n- 分割 77 得到 [7,7] 。\nanswer = [1,3,2,5,8,3,7,7] 。answer 中的数字分割结果按照原数字在数组中的相同顺序排列。\n</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>nums = [7,1,3,9]\n<strong>输出：</strong>[7,1,3,9]\n<strong>解释：</strong>nums 中每个整数的分割是它自己。\nanswer = [7,1,3,9] 。</pre>\n<h3 id=\"mcetoc_1i5u7hhce8\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>int countDigits(int num) {\n    int count = 0;\n    while (num != 0) {\n        num /= 10;\n        count++;\n    }\n    return count;\n}\n\n// 将整数 num 的各个数位分割并存储到 result 数组中\nvoid splitDigits(int num, int* result, int* index) {\n    int digits[10];\n    int i = 0;\n    \n    // 提取各个位数并存储到临时数组 digits 中\n    do {\n        digits[i++] = num % 10;\n        num /= 10;\n    } while (num &gt; 0);\n\n    // 将各位数按照正确的顺序存入 result 数组\n    while (i &gt; 0) {\n        result[(*index)++] = digits[--i];\n    }\n}\n\nint* separateDigits(int* nums, int numsSize, int* returnSize) {\n    // 计算分割后的总数位数量\n    int totalDigits = 0;\n    for (int i = 0; i &lt; numsSize; i++) {\n        totalDigits += countDigits(nums[i]);\n    }\n\n    // 分配存储结果的数组\n    int* result = (int*)malloc(totalDigits * sizeof(int));\n    *returnSize = totalDigits;\n\n    int index = 0;\n    for (int i = 0; i &lt; numsSize; i++) {\n        splitDigits(nums[i], result, &amp;index);\n    }\n\n    return result;\n}</code></pre>\n<h3 id=\"mcetoc_1i5u7i7g9c\">解释</h3>\n<ol>\n<li><strong>countDigits</strong> 函数用于计算一个整数的位数。</li>\n<li><strong>splitDigits</strong> 函数将整数的各个数位分割，并按顺序存储到结果数组中。</li>\n<li><strong>separateDigits</strong> 函数是核心函数，它调用 <code>countDigits</code> 计算所有数位的总和以分配结果数组的大小，然后调用 <code>splitDigits</code> 将每个整数分割并按顺序存储。</li>\n</ol>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-23T07:43:21+08:00",
            "date_modified": "2024-08-23T07:43:21+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/724-xun-zhao-shu-zu-de-zhong-xin-xia-biao.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/724-xun-zhao-shu-zu-de-zhong-xin-xia-biao.html",
            "title": "724. 寻找数组的中心下标",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i5srl6ett\">题目</a></li>\n<li><a href=\"#mcetoc_1i5srl6etu\">代码</a></li>\n<li><a href=\"#mcetoc_1i5srl6etv\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i5srl6ett\">题目</h3>\n<p>给你一个整数数组 <code>nums</code> ，请计算数组的 <strong>中心下标 </strong>。</p>\n<p>数组<strong> 中心下标</strong><strong> </strong>是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p>\n<p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code> ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p>\n<p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>nums = [1, 7, 3, 6, 5, 6]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n中心下标是 3 。\n左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，\n右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。\n</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>nums = [1, 2, 3]\n<strong>输出：</strong>-1\n<strong>解释：</strong>\n数组中不存在满足此条件的中心下标。</pre>\n<p><strong>示例 3：</strong></p>\n<pre><strong>输入：</strong>nums = [2, 1, -1]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n中心下标是 0 。\n左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），\n右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。</pre>\n<h3 id=\"mcetoc_1i5srl6etu\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>int pivotIndex(int* nums, int numsSize) {\n    int totalSum = 0;\n    for (int i = 0; i &lt; numsSize; i++) {\n        totalSum += nums[i];\n    }\n    \n    int leftSum = 0;\n    for (int i = 0; i &lt; numsSize; i++) {\n        if (leftSum == totalSum - leftSum - nums[i]) {\n            return i;\n        }\n        leftSum += nums[i];\n    }\n    \n    return -1;\n}</code></pre>\n<h3 id=\"mcetoc_1i5srl6etv\">解释</h3>\n<ol>\n<li><strong>总和计算</strong>：首先通过遍历数组来计算 <code>totalSum</code>。</li>\n<li><strong>遍历数组</strong>：我们用 <code>leftSum</code> 来表示当前下标 <code>i</code> 左边所有元素的和。</li>\n<li><strong>中心下标判断</strong>：对于每一个下标 <code>i</code>，判断 <code>leftSum</code> 是否等于右侧元素的和（<code>totalSum - leftSum - nums[i]</code>），如果是，则返回 <code>i</code>。</li>\n<li><strong>继续更新 <code>leftSum</code></strong>：在判断完之后，我们把当前元素加到 <code>leftSum</code> 中，以便下一个下标使用。</li>\n</ol>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-22T18:56:01+08:00",
            "date_modified": "2024-08-22T18:56:01+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/2144-da-zhe-gou-mai-tang-guo-de-zui-xiao-kai-xiao.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/2144-da-zhe-gou-mai-tang-guo-de-zui-xiao-kai-xiao.html",
            "title": "2144. 打折购买糖果的最小开销",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i5p1e3qur\">题目</a></li>\n<li><a href=\"#mcetoc_1i5p1e3qus\">代码</a></li>\n<li><a href=\"#mcetoc_1i5p1e3qut\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i5p1e3qur\">题目</h3>\n<p>一家商店正在打折销售糖果。每购买 <strong>两个</strong> 糖果，商店会 <strong>免费</strong> 送一个糖果。</p>\n<p>免费送的糖果唯一的限制是：它的价格需要小于等于购买的两个糖果价格的 <strong>较小值</strong> 。</p>\n<ul>\n<li>比方说，总共有 <code>4</code> 个糖果，价格分别为 <code>1</code> ，<code>2</code> ，<code>3</code> 和 <code>4</code> ，一位顾客买了价格为 <code>2</code> 和 <code>3</code> 的糖果，那么他可以免费获得价格为 <code>1</code> 的糖果，但不能获得价格为 <code>4</code> 的糖果。</li>\n</ul>\n<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 表示第 <code>i</code> 个糖果的价格，请你返回获得 <strong>所有</strong> 糖果的 <strong>最小</strong> 总开销。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>cost = [1,2,3]\n<strong>输出：</strong>5\n<strong>解释：</strong>我们购买价格为 2 和 3 的糖果，然后免费获得价格为 1 的糖果。\n总开销为 2 + 3 = 5 。这是开销最小的 <strong>唯一</strong> 方案。\n注意，我们不能购买价格为 1 和 3 的糖果，并免费获得价格为 2 的糖果。\n这是因为免费糖果的价格必须小于等于购买的 2 个糖果价格的较小值。\n</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>cost = [6,5,7,9,2,2]\n<strong>输出：</strong>23\n<strong>解释：</strong>最小总开销购买糖果方案为：\n- 购买价格为 9 和 7 的糖果\n- 免费获得价格为 6 的糖果\n- 购买价格为 5 和 2 的糖果\n- 免费获得价格为 2 的最后一个糖果\n因此，最小总开销为 9 + 7 + 5 + 2 = 23 。\n</pre>\n<p><strong>示例 3：</strong></p>\n<pre><strong>输入：</strong>cost = [5,5]\n<strong>输出：</strong>10\n<strong>解释：</strong>由于只有 2 个糖果，我们需要将它们都购买，而且没有免费糖果。\n所以总最小开销为 5 + 5 = 10 。</pre>\n<h3 id=\"mcetoc_1i5p1e3qus\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>// 比较函数，用于qsort排序\nint compare(const void* a, const void* b) {\n    return *(int*)b - *(int*)a; // 从大到小排序\n}\n\nint minimumCost(int* cost, int costSize) {\n    // 按价格从大到小排序\n    qsort(cost, costSize, sizeof(int), compare);\n    \n    int totalCost = 0;\n    \n    // 遍历所有糖果，每次取3个\n    for (int i = 0; i &lt; costSize; i++) {\n        // 只累加前两个糖果的价格，第三个糖果免费\n        if (i % 3 != 2) {\n            totalCost += cost[i];\n        }\n    }\n    \n    return totalCost;\n}</code></pre>\n<h3 id=\"mcetoc_1i5p1e3qut\">解释</h3>\n<ol>\n<li><strong>排序</strong>：<code>qsort</code>函数将糖果价格从高到低排序。</li>\n<li><strong>遍历</strong>：在循环中，通过 <code>i % 3 != 2</code> 来判断是否是每组中的第三个糖果，若是，则跳过它（因为它是免费的）。</li>\n<li><strong>累加价格</strong>：每组前两个糖果的价格累加到 <code>totalCost</code> 中。</li>\n</ol>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-21T07:20:03+08:00",
            "date_modified": "2024-08-21T07:20:03+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/989-shu-zu-xing-shi-de-zheng-shu-jia-fa.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/989-shu-zu-xing-shi-de-zheng-shu-jia-fa.html",
            "title": "989. 数组形式的整数加法",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i5mfanpl15\">题目</a></li>\n<li><a href=\"#mcetoc_1i5mfanpl16\">代码</a></li>\n<li><a href=\"#mcetoc_1i5mfanpl17\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i5mfanpl15\">题目</h3>\n<p>整数的 <strong>数组形式</strong>  <code>num</code> 是按照从左到右的顺序表示其数字的数组。</p>\n<ul>\n<li>例如，对于 <code>num = 1321</code> ，数组形式是 <code>[1,3,2,1]</code> 。</li>\n</ul>\n<p>给定 <code>num</code> ，整数的 <strong>数组形式</strong> ，和整数 <code>k</code> ，返回 <em>整数 <code>num + k</code> 的 <strong>数组形式</strong></em> 。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>num = [1,2,0,0], k = 34\n<strong>输出：</strong>[1,2,3,4]\n<strong>解释：</strong>1200 + 34 = 1234\n</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>num = [2,7,4], k = 181\n<strong>输出：</strong>[4,5,5]\n<strong>解释：</strong>274 + 181 = 455\n</pre>\n<p><strong>示例 3：</strong></p>\n<pre><strong>输入：</strong>num = [2,1,5], k = 806\n<strong>输出：</strong>[1,0,2,1]\n<strong>解释：</strong>215 + 806 = 1021</pre>\n<h3 id=\"mcetoc_1i5mfanpl16\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>int* addToArrayForm(int* num, int numSize, int k, int* returnSize) {\n    // 分配足够大的空间存储结果数组\n    int* result = (int*)malloc(sizeof(int) * (numSize + 10)); // 预留足够的空间处理进位\n    int currentIndex = 0; // 用于存放结果数组的当前索引\n    int carry = k; // 初始进位为 k\n    int i;\n\n    // 从 num 数组的末尾向前遍历\n    for (i = numSize - 1; i &gt;= 0 || carry &gt; 0; i--) {\n        if (i &gt;= 0) {\n            carry += num[i]; // 将当前位的数字与进位相加\n        }\n        result[currentIndex++] = carry % 10; // 取个位作为当前结果位\n        carry /= 10; // 更新进位\n    }\n\n    // 结果数组是逆序存储的，需要翻转\n    for (i = 0; i &lt; currentIndex / 2; i++) {\n        int temp = result[i];\n        result[i] = result[currentIndex - i - 1];\n        result[currentIndex - i - 1] = temp;\n    }\n\n    *returnSize = currentIndex; // 更新结果数组的大小\n    return result; // 返回结果数组的指针\n}</code></pre>\n<h3 id=\"mcetoc_1i5mfanpl17\">解释</h3>\n<ul>\n<li>\n<p><strong>分配足够大的空间</strong>：由于进位的原因，结果数组可能比 <code>num</code> 长，因此分配 <code>numSize + 10</code> 的空间来容纳可能的额外位数。</p>\n</li>\n<li>\n<p><strong>逐位相加</strong>：从 <code>num</code> 的最低位（数组末尾）开始，逐位将 <code>num</code> 的对应位与 <code>k</code> 的当前位相加，并处理进位。</p>\n</li>\n<li>\n<p><strong>处理剩余的进位</strong>：在 <code>num</code> 数组遍历完后，如果还有进位，继续将进位加到结果中。</p>\n</li>\n<li>\n<p><strong>翻转结果</strong>：由于结果是从最低位开始存储的，因此最后需要翻转数组才能得到正确的顺序。</p>\n</li>\n<li>\n<p><strong>返回结果</strong>：返回计算得到的结果数组以及其大小。</p>\n</li>\n</ul>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-20T07:25:10+08:00",
            "date_modified": "2024-08-20T07:25:10+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/mian-shi-ti-1710-zhu-yao-yuan-su.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/mian-shi-ti-1710-zhu-yao-yuan-su.html",
            "title": "面试题 17.10. 主要元素",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i5jsiu2c11\">题目</a></li>\n<li><a href=\"#mcetoc_1i5jsiu2c12\">代码</a></li>\n<li><a href=\"#mcetoc_1i5jsiu2c13\">Boyer-Moore 投票算法的详细解释</a>\n<ul>\n<li><a href=\"#mcetoc_1i5jsiu2c14\">问题定义</a></li>\n<li><a href=\"#mcetoc_1i5jsiu2c15\">算法思想</a></li>\n<li><a href=\"#mcetoc_1i5jsiu2c16\">具体步骤</a></li>\n<li><a href=\"#mcetoc_1i5jsiu2c17\">为什么这个算法有效？</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i5jsiu2c11\">题目</h3>\n<p>数组中占比超过一半的元素称之为主要元素。给你一个<strong> 整数 </strong>数组，找出其中的主要元素。若没有，返回 <code>-1</code> 。请设计时间复杂度为 <code>O(N)</code> 、空间复杂度为 <code>O(1)</code> 的解决方案。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>[1,2,5,9,5,9,5,5,5]\n<strong>输出：</strong>5</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>[3,2]\n<strong>输出：</strong>-1</pre>\n<p><strong>示例 3：</strong></p>\n<pre><strong>输入：</strong>[2,2,1,1,1,2,2]\n<strong>输出：</strong>2</pre>\n<h3 id=\"mcetoc_1i5jsiu2c12\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>int majorityElement(int* nums, int numsSize) {\n    int candidate = 0;\n    int count = 0;\n    \n    // 第一遍遍历，找到候选人\n    for (int i = 0; i &lt; numsSize; i++) {\n        if (count == 0) {\n            candidate = nums[i];\n            count = 1;\n        } else if (nums[i] == candidate) {\n            count++;\n        } else {\n            count--;\n        }\n    }\n    \n    // 第二遍遍历，验证候选人是否为主要元素\n    count = 0;\n    for (int i = 0; i &lt; numsSize; i++) {\n        if (nums[i] == candidate) {\n            count++;\n        }\n    }\n    \n    // 判断是否是主要元素\n    if (count &gt; numsSize / 2) {\n        return candidate;\n    } else {\n        return -1;\n    }\n}\n</code></pre>\n<h3 id=\"mcetoc_1i5jsiu2c13\">Boyer-Moore 投票算法的详细解释</h3>\n<p>Boyer-Moore 投票算法是一种非常巧妙且高效的算法，用于在时间复杂度为 O(N) 且空间复杂度为 O(1) 的条件下找到数组中的主要元素。下面我们详细解释这个算法的工作原理和步骤。</p>\n<h4 id=\"mcetoc_1i5jsiu2c14\">问题定义</h4>\n<p>主要元素是指在数组中出现次数超过一半的元素。给定一个大小为 <code>n</code> 的数组，主要元素出现的次数必须超过 <code>n/2</code>。</p>\n<h4 id=\"mcetoc_1i5jsiu2c15\">算法思想</h4>\n<p>算法的核心思想是：</p>\n<ol>\n<li><strong>候选人筛选</strong>：我们需要找到一个“候选人”作为主要元素。通过一次遍历，我们可以确定一个候选人，这个候选人有可能是主要元素。</li>\n<li><strong>验证候选人</strong>：由于筛选出来的候选人不一定是主要元素，我们需要通过第二次遍历来验证这个候选人是否真的出现次数超过数组的一半。</li>\n</ol>\n<h4 id=\"mcetoc_1i5jsiu2c16\">具体步骤</h4>\n<p><strong>第一步：候选人筛选</strong></p>\n<ol>\n<li>\n<p>初始化两个变量：</p>\n<ul>\n<li><code>candidate</code>：用于记录当前的候选元素。</li>\n<li><code>count</code>：用于记录当前候选元素的出现次数。</li>\n</ul>\n</li>\n<li>\n<p>遍历整个数组：</p>\n<ul>\n<li>如果 <code>count</code> 为 <code>0</code>，表示当前没有候选人或前一个候选人已经被“淘汰”。此时将当前元素设置为新的候选人，并将 <code>count</code> 设为 <code>1</code>。</li>\n<li>如果当前元素与 <code>candidate</code> 相同，则说明这个元素支持当前的候选人，增加 <code>count</code>。</li>\n<li>如果当前元素与 <code>candidate</code> 不同，则认为这是一个反对票，减少 <code>count</code>。</li>\n</ul>\n</li>\n</ol>\n<p>通过上述遍历，我们可以找到一个最终的候选人 <code>candidate</code>。这个候选人有可能是主要元素，但我们还需要验证。</p>\n<p><strong>第二步：验证候选人</strong></p>\n<ol>\n<li>初始化 <code>count</code> 为 <code>0</code>，然后再遍历数组。</li>\n<li>每遇到一个与 <code>candidate</code> 相同的元素，就增加 <code>count</code>。</li>\n<li>最后检查 <code>count</code> 是否大于 <code>n/2</code>：\n<ul>\n<li>如果是，说明 <code>candidate</code> 是主要元素，返回它。</li>\n<li>如果不是，说明数组中没有主要元素，返回 <code>-1</code>。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"mcetoc_1i5jsiu2c17\">为什么这个算法有效？</h4>\n<p>要理解为什么这个算法有效，我们可以从以下角度来分析：</p>\n<ul>\n<li>\n<p><strong>筛选过程的有效性</strong>：当 <code>count</code> 变为 <code>0</code> 时，表示我们目前没有候选人或之前的候选人已经被完全抵消（即遇到了足够多的不同元素来平衡掉候选人）。此时，我们选择当前的元素作为新的候选人。由于主要元素的数量超过总数的一半，它不可能被完全抵消，因此最终得到的候选人要么是主要元素，要么是非主要元素。</p>\n</li>\n<li>\n<p><strong>验证过程的必要性</strong>：由于第一次筛选过程仅能保证筛选出一个潜在的候选人，因此我们需要第二次遍历来确认它是否真的出现次数超过一半。如果 <code>count</code> 大于 <code>n/2</code>，则它就是主要元素。</p>\n</li>\n</ul>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-19T07:19:08+08:00",
            "date_modified": "2024-08-19T07:19:08+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/1252-qi-shu-zhi-dan-yuan-ge-de-shu-mu.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/1252-qi-shu-zhi-dan-yuan-ge-de-shu-mu.html",
            "title": "1252. 奇数值单元格的数目",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i5hcdbnu1h\">题目</a></li>\n<li><a href=\"#mcetoc_1i5hcdbnu1i\">代码</a></li>\n<li><a href=\"#mcetoc_1i5hcdbnu1j\">代码说明</a></li>\n<li><a href=\"#mcetoc_1i5hcdbnu1k\">参数说明</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i5hcdbnu1h\">题目</h3>\n<p>给你一个 <code>m x n</code> 的矩阵，最开始的时候，每个单元格中的值都是 <code>0</code>。</p>\n<p>另有一个二维索引数组 <code>indices</code>，<code>indices[i] = [ri, ci]</code> 指向矩阵中的某个位置，其中 <code>ri</code> 和 <code>ci</code> 分别表示指定的行和列（<strong>从 <code>0</code> 开始编号</strong>）。</p>\n<p>对 <code>indices[i]</code> 所指向的每个位置，应同时执行下述增量操作：</p>\n<ol>\n<li><code>r<sub>i</sub></code> 行上的所有单元格，加 <code>1</code> 。</li>\n<li><code>c<sub>i</sub></code> 列上的所有单元格，加 <code>1</code> 。</li>\n</ol>\n<p>给你 <code>m</code>、<code>n</code> 和 <code>indices</code> 。请你在执行完所有 <code>indices</code> 指定的增量操作后，返回矩阵中 <strong>奇数值单元格</strong> 的数目。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<p><img loading=\"lazy\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/06/e1.png\" alt=\"\" data-is-external-image=\"true\"></p>\n<pre><strong>输入：</strong>m = 2, n = 3, indices = [[0,1],[1,1]]\n<strong>输出：</strong>6\n<strong>解释：</strong>最开始的矩阵是 [[0,0,0],[0,0,0]]。\n第一次增量操作后得到 [[1,2,1],[0,1,0]]。\n最后的矩阵是 [[1,3,1],[1,3,1]]，里面有 6 个奇数。\n</pre>\n<p><strong>示例 2：</strong></p>\n<p><img loading=\"lazy\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/06/e2.png\" alt=\"\" data-is-external-image=\"true\"></p>\n<pre><strong>输入：</strong>m = 2, n = 2, indices = [[1,1],[0,0]]\n<strong>输出：</strong>0\n<strong>解释：</strong>最后的矩阵是 [[2,2],[2,2]]，里面没有奇数。</pre>\n<h3 id=\"mcetoc_1i5hcdbnu1i\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>int oddCells(int m, int n, int** indices, int indicesSize, int* indicesColSize) {\n    // 初始化行和列的增量计数\n    int* row_count = (int*)calloc(m, sizeof(int));\n    int* col_count = (int*)calloc(n, sizeof(int));\n    \n    // 对每个 indices 中的 (ri, ci) 进行操作\n    for (int i = 0; i &lt; indicesSize; i++) {\n        int ri = indices[i][0];\n        int ci = indices[i][1];\n        row_count[ri]++;\n        col_count[ci]++;\n    }\n    \n    // 计算奇数值单元格的数量\n    int odd_count = 0;\n    for (int i = 0; i &lt; m; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            // 计算当前单元格的值\n            int value = row_count[i] + col_count[j];\n            if (value % 2 == 1) {\n                odd_count++;\n            }\n        }\n    }\n    \n    // 释放动态分配的内存\n    free(row_count);\n    free(col_count);\n    \n    return odd_count;\n}</code></pre>\n<h3 id=\"mcetoc_1i5hcdbnu1j\">代码说明</h3>\n<ol>\n<li><strong>内存分配</strong>：使用 <code>calloc</code> 分别为 <code>row_count</code> 和 <code>col_count</code> 动态分配内存，并将其初始值设置为 0。</li>\n<li><strong>操作增量</strong>：对每个索引 <code>[ri, ci]</code>，增加对应行和列的计数。</li>\n<li><strong>计算奇数单元格</strong>：通过遍历每个单元格，计算其对应的行列增量和，如果结果是奇数，增加计数。</li>\n<li><strong>释放内存</strong>：最后使用 <code>free</code> 释放动态分配的内存。</li>\n</ol>\n<h3 id=\"mcetoc_1i5hcdbnu1k\">参数说明</h3>\n<ul>\n<li><code>m</code>：矩阵的行数。</li>\n<li><code>n</code>：矩阵的列数。</li>\n<li><code>indices</code>：二维索引数组。</li>\n<li><code>indicesSize</code>：<code>indices</code> 数组的行数（即索引对的数量）。</li>\n<li><code>indicesColSize</code>：每一行索引数组的列数（始终为 2）。</li>\n</ul>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-18T07:57:58+08:00",
            "date_modified": "2024-08-18T07:57:58+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/819-zui-chang-jian-de-dan-ci.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/819-zui-chang-jian-de-dan-ci.html",
            "title": "819. 最常见的单词",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i5eoag1i11\">题目</a></li>\n<li><a href=\"#mcetoc_1i5eoag1i12\">代码</a></li>\n<li><a href=\"#mcetoc_1i5eoag1i13\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i5eoag1i11\">题目</h3>\n<p>给你一个字符串 <code>paragraph</code> 和一个表示禁用词的字符串数组 <code>banned</code> ，返回出现频率最高的非禁用词。题目数据 <strong>保证 </strong>至少存在一个非禁用词，且答案<strong> 唯一 </strong>。</p>\n<p><code>paragraph</code> 中的单词 <strong>不区分大小写</strong> ，答案应以 <strong>小写 </strong>形式返回。</p>\n<p> </p>\n<p><strong class=\"example\">示例 1：</strong></p>\n<pre><strong>输入：</strong>paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]\n<strong>输出：</strong>\"ball\"\n<strong>解释：</strong>\n\"hit\" 出现了 3 次，但它是禁用词。\n\"ball\" 出现了两次（没有其他单词出现这么多次），因此它是段落中出现频率最高的非禁用词。\n请注意，段落中的单词不区分大小写，\n标点符号会被忽略（即使它们紧挨着单词，如 \"ball,\"），\n并且尽管 \"hit\" 出现的次数更多，但它不能作为答案，因为它是禁用词。\n</pre>\n<p><strong class=\"example\">示例 2：</strong></p>\n<pre><strong>输入：</strong>paragraph = \"a.\", banned = []\n<strong>输出：</strong>\"a\"</pre>\n<h3 id=\"mcetoc_1i5eoag1i12\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>#define MAX_WORD_LEN 100\n#define MAX_PARA_LEN 10000\n\n// 函数用于比较哈希表中存储的单词\ntypedef struct {\n    char word[MAX_WORD_LEN];\n    int count;\n} HashTableEntry;\n\n// 将字符串转换为小写\nvoid toLowerCase(char* str) {\n    while (*str) {\n        *str = tolower(*str);\n        str++;\n    }\n}\n\n// 检查单词是否在禁用词列表中\nint isBanned(char* word, char** banned, int bannedSize) {\n    for (int i = 0; i &lt; bannedSize; i++) {\n        if (strcmp(word, banned[i]) == 0) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\n// 从段落中提取下一个单词\nchar* nextWord(char* paragraph, int* index) {\n    static char word[MAX_WORD_LEN];\n    int i = 0;\n\n    while (paragraph[*index]) {\n        char c = paragraph[*index];\n        if (isalpha(c)) {\n            word[i++] = tolower(c);\n        } else if (i &gt; 0) {\n            break;\n        }\n        (*index)++;\n    }\n\n    word[i] = '\\0';\n    while (paragraph[*index] &amp;&amp; !isalpha(paragraph[*index])) {\n        (*index)++;\n    }\n\n    return word[0] ? word : NULL;\n}\n\nchar* mostCommonWord(char* paragraph, char** banned, int bannedSize) {\n    HashTableEntry hashTable[MAX_PARA_LEN] = {0};\n    int index = 0;\n    int maxCount = 0;\n    char* mostCommon = NULL;\n\n    while (paragraph[index]) {\n        char* word = nextWord(paragraph, &amp;index);\n        if (!word || isBanned(word, banned, bannedSize)) {\n            continue;\n        }\n\n        int found = 0;\n        for (int i = 0; i &lt; MAX_PARA_LEN &amp;&amp; hashTable[i].word[0]; i++) {\n            if (strcmp(hashTable[i].word, word) == 0) {\n                hashTable[i].count++;\n                found = 1;\n                if (hashTable[i].count &gt; maxCount) {\n                    maxCount = hashTable[i].count;\n                    mostCommon = hashTable[i].word;\n                }\n                break;\n            }\n        }\n\n        if (!found) {\n            for (int i = 0; i &lt; MAX_PARA_LEN; i++) {\n                if (hashTable[i].word[0] == '\\0') {\n                    strcpy(hashTable[i].word, word);\n                    hashTable[i].count = 1;\n                    if (hashTable[i].count &gt; maxCount) {\n                        maxCount = 1;\n                        mostCommon = hashTable[i].word;\n                    }\n                    break;\n                }\n            }\n        }\n    }\n\n    return mostCommon;\n}</code></pre>\n<h3 id=\"mcetoc_1i5eoag1i13\">解释</h3>\n<ol>\n<li><strong>字符串转换为小写</strong>：在处理段落时，所有单词都会被转换为小写，以确保比较时不区分大小写。</li>\n<li><strong>提取单词</strong>：使用 <code>nextWord</code> 函数从段落中依次提取单词，并跳过标点符号和空格。</li>\n<li><strong>检查禁用词</strong>：每个提取的单词都会与禁用词列表进行比较，如果是禁用词则跳过。</li>\n<li><strong>计数与哈希表</strong>：通过哈希表存储每个单词及其出现次数，并更新频率最高的非禁用词。</li>\n<li><strong>返回结果</strong>：最终返回频率最高的非禁用词。</li>\n</ol>\n<p> </p>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-17T07:28:34+08:00",
            "date_modified": "2024-08-17T07:28:34+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/1295-tong-ji-wei-shu-wei-ou-shu-de-shu-zi.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/1295-tong-ji-wei-shu-wei-ou-shu-de-shu-zi.html",
            "title": "1295. 统计位数为偶数的数字",
            "content_html": "<h3>题目</h3>\n<p>给你一个整数数组 <code>nums</code>，请你返回其中位数为 <strong>偶数</strong> 的数字的个数。</p>\n<p> </p>\n<p><strong>示例 1：</strong></p>\n<pre><strong>输入：</strong>nums = [12,345,2,6,7896]\n<strong>输出：</strong>2\n<strong>解释：\n</strong>12 是 2 位数字（位数为偶数） \n345 是 3 位数字（位数为奇数）  \n2 是 1 位数字（位数为奇数） \n6 是 1 位数字 位数为奇数） \n7896 是 4 位数字（位数为偶数）  \n因此只有 12 和 7896 是位数为偶数的数字\n</pre>\n<p><strong>示例 2：</strong></p>\n<pre><strong>输入：</strong>nums = [555,901,482,1771]\n<strong>输出：</strong>1 \n<strong>解释： </strong>\n只有 1771 是位数为偶数的数字。</pre>\n<h3>代码</h3>\n<pre class=\"language-c line-numbers\"><code>int findNumbers(int* nums, int numsSize) {\n    int count = 0;\n    for (int i = 0; i &lt; numsSize; i++) {\n        int k = 0;\n        for (int j = nums[i]; j != 0; k++) {\n            j = j / 10;\n        }\n        if (k % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}</code></pre>\n<p> </p>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-16T07:54:58+08:00",
            "date_modified": "2024-08-16T07:54:58+08:00"
        },
        {
            "id": "https://hxfcoy.github.io/xcll.github.io/2525-gen-ju-gui-ze-jiang-xiang-zi-fen-lei.html",
            "url": "https://hxfcoy.github.io/xcll.github.io/2525-gen-ju-gui-ze-jiang-xiang-zi-fen-lei.html",
            "title": "2525. 根据规则将箱子分类",
            "content_html": "<div class=\"post__toc\">\n<h3>目录</h3>\n<ul>\n<li><a href=\"#mcetoc_1i59kcaatr\">题目</a></li>\n<li><a href=\"#mcetoc_1i59kcaats\">代码</a></li>\n<li><a href=\"#mcetoc_1i59kcaatt\">解释</a></li>\n</ul>\n</div>\n<h3 id=\"mcetoc_1i59kcaatr\">题目</h3>\n<p>给你四个整数 <code>length</code> ，<code>width</code> ，<code>height</code> 和 <code>mass</code> ，分别表示一个箱子的三个维度和质量，请你返回一个表示箱子 <strong>类别</strong> 的字符串。</p>\n<ul>\n<li>如果满足以下条件，那么箱子是 <code>\"Bulky\"</code> 的：\n<ul>\n<li>箱子 <strong>至少有一个</strong> 维度大于等于 <code>10<sup>4</sup></code> 。</li>\n<li>或者箱子的 <strong>体积</strong> 大于等于 <code>10<sup>9</sup></code> 。</li>\n</ul>\n</li>\n<li>如果箱子的质量大于等于 <code>100</code> ，那么箱子是 <code>\"Heavy\"</code> 的。</li>\n<li>如果箱子同时是 <code>\"Bulky\"</code> 和 <code>\"Heavy\"</code> ，那么返回类别为 <code>\"Both\"</code> 。</li>\n<li>如果箱子既不是 <code>\"Bulky\"</code> ，也不是 <code>\"Heavy\"</code> ，那么返回类别为 <code>\"Neither\"</code> 。</li>\n<li>如果箱子是 <code>\"Bulky\"</code> 但不是 <code>\"Heavy\"</code> ，那么返回类别为 <code>\"Bulky\"</code> 。</li>\n<li>如果箱子是 <code>\"Heavy\"</code> 但不是 <code>\"Bulky\"</code> ，那么返回类别为 <code>\"Heavy\"</code> 。</li>\n</ul>\n<p><strong>注意</strong>，箱子的体积等于箱子的长度、宽度和高度的乘积。</p>\n<h3 id=\"mcetoc_1i59kcaats\">代码</h3>\n<pre class=\"language-c line-numbers\"><code>char* categorizeBox(int length, int width, int height, int mass) {\n    long long volume = (long long)length * width * height;\n    int isBulky = length &gt;= 10000 || width &gt;= 10000 || height &gt;= 10000 || volume &gt;= 1000000000;\n    int isHeavy = mass &gt;= 100;\n\n    if (isBulky &amp;&amp; isHeavy) {\n        return \"Both\";\n    } else if (isBulky) {\n        return \"Bulky\";\n    } else if (isHeavy) {\n        return \"Heavy\";\n    } else {\n        return \"Neither\";\n    }\n}</code></pre>\n<h3 id=\"mcetoc_1i59kcaatt\">解释</h3>\n<ol>\n<li>计算体积 <code>volume</code>。</li>\n<li>检查是否为“Bulky”：如果任一维度大于等于 10,000 或者体积大于等于 10^9，则标记为 Bulky。</li>\n<li>检查是否为“Heavy”：如果质量大于等于 100，则标记为 Heavy。</li>\n<li>根据条件返回相应的类别：<code>Both</code>、<code>Bulky</code>、<code>Heavy</code> 或 <code>Neither</code>。</li>\n</ol>",
            "author": {
                "name": "fcoy"
            },
            "tags": [
                   "力扣"
            ],
            "date_published": "2024-08-15T07:43:20+08:00",
            "date_modified": "2024-08-15T07:43:20+08:00"
        }
    ]
}
