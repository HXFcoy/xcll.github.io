<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>xcll’s blog</title>
    <link href="https://hxfcoy.github.io/xcll.github.io/feed.xml" rel="self" />
    <link href="https://hxfcoy.github.io/xcll.github.io" />
    <updated>2024-08-22T18:56:01+08:00</updated>
    <author>
        <name>fcoy</name>
    </author>
    <id>https://hxfcoy.github.io/xcll.github.io</id>

    <entry>
        <title>724. 寻找数组的中心下标</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/724-xun-zhao-shu-zu-de-zhong-xin-xia-biao.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/724-xun-zhao-shu-zu-de-zhong-xin-xia-biao.html</id>
            <category term="力扣"/>

        <updated>2024-08-22T18:56:01+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i5srl6ett">题目</a></li>
<li><a href="#mcetoc_1i5srl6etu">代码</a></li>
<li><a href="#mcetoc_1i5srl6etv">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i5srl6ett">题目</h3>
<p>给你一个整数数组 <code>nums</code> ，请计算数组的 <strong>中心下标 </strong>。</p>
<p>数组<strong> 中心下标</strong><strong> </strong>是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p>
<p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code> ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p>
<p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>nums = [1, 7, 3, 6, 5, 6]
<strong>输出：</strong>3
<strong>解释：</strong>
中心下标是 3 。
左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，
右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。
</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>nums = [1, 2, 3]
<strong>输出：</strong>-1
<strong>解释：</strong>
数组中不存在满足此条件的中心下标。</pre>
<p><strong>示例 3：</strong></p>
<pre><strong>输入：</strong>nums = [2, 1, -1]
<strong>输出：</strong>0
<strong>解释：</strong>
中心下标是 0 。
左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），
右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。</pre>
<h3 id="mcetoc_1i5srl6etu">代码</h3>
<pre class="language-c line-numbers"><code>int pivotIndex(int* nums, int numsSize) {
    int totalSum = 0;
    for (int i = 0; i &lt; numsSize; i++) {
        totalSum += nums[i];
    }
    
    int leftSum = 0;
    for (int i = 0; i &lt; numsSize; i++) {
        if (leftSum == totalSum - leftSum - nums[i]) {
            return i;
        }
        leftSum += nums[i];
    }
    
    return -1;
}</code></pre>
<h3 id="mcetoc_1i5srl6etv">解释</h3>
<ol>
<li><strong>总和计算</strong>：首先通过遍历数组来计算 <code>totalSum</code>。</li>
<li><strong>遍历数组</strong>：我们用 <code>leftSum</code> 来表示当前下标 <code>i</code> 左边所有元素的和。</li>
<li><strong>中心下标判断</strong>：对于每一个下标 <code>i</code>，判断 <code>leftSum</code> 是否等于右侧元素的和（<code>totalSum - leftSum - nums[i]</code>），如果是，则返回 <code>i</code>。</li>
<li><strong>继续更新 <code>leftSum</code></strong>：在判断完之后，我们把当前元素加到 <code>leftSum</code> 中，以便下一个下标使用。</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>2144. 打折购买糖果的最小开销</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/2144-da-zhe-gou-mai-tang-guo-de-zui-xiao-kai-xiao.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/2144-da-zhe-gou-mai-tang-guo-de-zui-xiao-kai-xiao.html</id>
            <category term="力扣"/>

        <updated>2024-08-21T07:20:03+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i5p1e3qur">题目</a></li>
<li><a href="#mcetoc_1i5p1e3qus">代码</a></li>
<li><a href="#mcetoc_1i5p1e3qut">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i5p1e3qur">题目</h3>
<p>一家商店正在打折销售糖果。每购买 <strong>两个</strong> 糖果，商店会 <strong>免费</strong> 送一个糖果。</p>
<p>免费送的糖果唯一的限制是：它的价格需要小于等于购买的两个糖果价格的 <strong>较小值</strong> 。</p>
<ul>
<li>比方说，总共有 <code>4</code> 个糖果，价格分别为 <code>1</code> ，<code>2</code> ，<code>3</code> 和 <code>4</code> ，一位顾客买了价格为 <code>2</code> 和 <code>3</code> 的糖果，那么他可以免费获得价格为 <code>1</code> 的糖果，但不能获得价格为 <code>4</code> 的糖果。</li>
</ul>
<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 表示第 <code>i</code> 个糖果的价格，请你返回获得 <strong>所有</strong> 糖果的 <strong>最小</strong> 总开销。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>cost = [1,2,3]
<strong>输出：</strong>5
<strong>解释：</strong>我们购买价格为 2 和 3 的糖果，然后免费获得价格为 1 的糖果。
总开销为 2 + 3 = 5 。这是开销最小的 <strong>唯一</strong> 方案。
注意，我们不能购买价格为 1 和 3 的糖果，并免费获得价格为 2 的糖果。
这是因为免费糖果的价格必须小于等于购买的 2 个糖果价格的较小值。
</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>cost = [6,5,7,9,2,2]
<strong>输出：</strong>23
<strong>解释：</strong>最小总开销购买糖果方案为：
- 购买价格为 9 和 7 的糖果
- 免费获得价格为 6 的糖果
- 购买价格为 5 和 2 的糖果
- 免费获得价格为 2 的最后一个糖果
因此，最小总开销为 9 + 7 + 5 + 2 = 23 。
</pre>
<p><strong>示例 3：</strong></p>
<pre><strong>输入：</strong>cost = [5,5]
<strong>输出：</strong>10
<strong>解释：</strong>由于只有 2 个糖果，我们需要将它们都购买，而且没有免费糖果。
所以总最小开销为 5 + 5 = 10 。</pre>
<h3 id="mcetoc_1i5p1e3qus">代码</h3>
<pre class="language-c line-numbers"><code>// 比较函数，用于qsort排序
int compare(const void* a, const void* b) {
    return *(int*)b - *(int*)a; // 从大到小排序
}

int minimumCost(int* cost, int costSize) {
    // 按价格从大到小排序
    qsort(cost, costSize, sizeof(int), compare);
    
    int totalCost = 0;
    
    // 遍历所有糖果，每次取3个
    for (int i = 0; i &lt; costSize; i++) {
        // 只累加前两个糖果的价格，第三个糖果免费
        if (i % 3 != 2) {
            totalCost += cost[i];
        }
    }
    
    return totalCost;
}</code></pre>
<h3 id="mcetoc_1i5p1e3qut">解释</h3>
<ol>
<li><strong>排序</strong>：<code>qsort</code>函数将糖果价格从高到低排序。</li>
<li><strong>遍历</strong>：在循环中，通过 <code>i % 3 != 2</code> 来判断是否是每组中的第三个糖果，若是，则跳过它（因为它是免费的）。</li>
<li><strong>累加价格</strong>：每组前两个糖果的价格累加到 <code>totalCost</code> 中。</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>989. 数组形式的整数加法</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/989-shu-zu-xing-shi-de-zheng-shu-jia-fa.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/989-shu-zu-xing-shi-de-zheng-shu-jia-fa.html</id>
            <category term="力扣"/>

        <updated>2024-08-20T07:25:10+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i5mfanpl15">题目</a></li>
<li><a href="#mcetoc_1i5mfanpl16">代码</a></li>
<li><a href="#mcetoc_1i5mfanpl17">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i5mfanpl15">题目</h3>
<p>整数的 <strong>数组形式</strong>  <code>num</code> 是按照从左到右的顺序表示其数字的数组。</p>
<ul>
<li>例如，对于 <code>num = 1321</code> ，数组形式是 <code>[1,3,2,1]</code> 。</li>
</ul>
<p>给定 <code>num</code> ，整数的 <strong>数组形式</strong> ，和整数 <code>k</code> ，返回 <em>整数 <code>num + k</code> 的 <strong>数组形式</strong></em> 。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>num = [1,2,0,0], k = 34
<strong>输出：</strong>[1,2,3,4]
<strong>解释：</strong>1200 + 34 = 1234
</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>num = [2,7,4], k = 181
<strong>输出：</strong>[4,5,5]
<strong>解释：</strong>274 + 181 = 455
</pre>
<p><strong>示例 3：</strong></p>
<pre><strong>输入：</strong>num = [2,1,5], k = 806
<strong>输出：</strong>[1,0,2,1]
<strong>解释：</strong>215 + 806 = 1021</pre>
<h3 id="mcetoc_1i5mfanpl16">代码</h3>
<pre class="language-c line-numbers"><code>int* addToArrayForm(int* num, int numSize, int k, int* returnSize) {
    // 分配足够大的空间存储结果数组
    int* result = (int*)malloc(sizeof(int) * (numSize + 10)); // 预留足够的空间处理进位
    int currentIndex = 0; // 用于存放结果数组的当前索引
    int carry = k; // 初始进位为 k
    int i;

    // 从 num 数组的末尾向前遍历
    for (i = numSize - 1; i &gt;= 0 || carry &gt; 0; i--) {
        if (i &gt;= 0) {
            carry += num[i]; // 将当前位的数字与进位相加
        }
        result[currentIndex++] = carry % 10; // 取个位作为当前结果位
        carry /= 10; // 更新进位
    }

    // 结果数组是逆序存储的，需要翻转
    for (i = 0; i &lt; currentIndex / 2; i++) {
        int temp = result[i];
        result[i] = result[currentIndex - i - 1];
        result[currentIndex - i - 1] = temp;
    }

    *returnSize = currentIndex; // 更新结果数组的大小
    return result; // 返回结果数组的指针
}</code></pre>
<h3 id="mcetoc_1i5mfanpl17">解释</h3>
<ul>
<li>
<p><strong>分配足够大的空间</strong>：由于进位的原因，结果数组可能比 <code>num</code> 长，因此分配 <code>numSize + 10</code> 的空间来容纳可能的额外位数。</p>
</li>
<li>
<p><strong>逐位相加</strong>：从 <code>num</code> 的最低位（数组末尾）开始，逐位将 <code>num</code> 的对应位与 <code>k</code> 的当前位相加，并处理进位。</p>
</li>
<li>
<p><strong>处理剩余的进位</strong>：在 <code>num</code> 数组遍历完后，如果还有进位，继续将进位加到结果中。</p>
</li>
<li>
<p><strong>翻转结果</strong>：由于结果是从最低位开始存储的，因此最后需要翻转数组才能得到正确的顺序。</p>
</li>
<li>
<p><strong>返回结果</strong>：返回计算得到的结果数组以及其大小。</p>
</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>面试题 17.10. 主要元素</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/mian-shi-ti-1710-zhu-yao-yuan-su.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/mian-shi-ti-1710-zhu-yao-yuan-su.html</id>
            <category term="力扣"/>

        <updated>2024-08-19T07:19:08+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i5jsiu2c11">题目</a></li>
<li><a href="#mcetoc_1i5jsiu2c12">代码</a></li>
<li><a href="#mcetoc_1i5jsiu2c13">Boyer-Moore 投票算法的详细解释</a>
<ul>
<li><a href="#mcetoc_1i5jsiu2c14">问题定义</a></li>
<li><a href="#mcetoc_1i5jsiu2c15">算法思想</a></li>
<li><a href="#mcetoc_1i5jsiu2c16">具体步骤</a></li>
<li><a href="#mcetoc_1i5jsiu2c17">为什么这个算法有效？</a></li>
</ul>
</li>
</ul>
</div>
<h3 id="mcetoc_1i5jsiu2c11">题目</h3>
<p>数组中占比超过一半的元素称之为主要元素。给你一个<strong> 整数 </strong>数组，找出其中的主要元素。若没有，返回 <code>-1</code> 。请设计时间复杂度为 <code>O(N)</code> 、空间复杂度为 <code>O(1)</code> 的解决方案。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>[1,2,5,9,5,9,5,5,5]
<strong>输出：</strong>5</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>[3,2]
<strong>输出：</strong>-1</pre>
<p><strong>示例 3：</strong></p>
<pre><strong>输入：</strong>[2,2,1,1,1,2,2]
<strong>输出：</strong>2</pre>
<h3 id="mcetoc_1i5jsiu2c12">代码</h3>
<pre class="language-c line-numbers"><code>int majorityElement(int* nums, int numsSize) {
    int candidate = 0;
    int count = 0;
    
    // 第一遍遍历，找到候选人
    for (int i = 0; i &lt; numsSize; i++) {
        if (count == 0) {
            candidate = nums[i];
            count = 1;
        } else if (nums[i] == candidate) {
            count++;
        } else {
            count--;
        }
    }
    
    // 第二遍遍历，验证候选人是否为主要元素
    count = 0;
    for (int i = 0; i &lt; numsSize; i++) {
        if (nums[i] == candidate) {
            count++;
        }
    }
    
    // 判断是否是主要元素
    if (count &gt; numsSize / 2) {
        return candidate;
    } else {
        return -1;
    }
}
</code></pre>
<h3 id="mcetoc_1i5jsiu2c13">Boyer-Moore 投票算法的详细解释</h3>
<p>Boyer-Moore 投票算法是一种非常巧妙且高效的算法，用于在时间复杂度为 O(N) 且空间复杂度为 O(1) 的条件下找到数组中的主要元素。下面我们详细解释这个算法的工作原理和步骤。</p>
<h4 id="mcetoc_1i5jsiu2c14">问题定义</h4>
<p>主要元素是指在数组中出现次数超过一半的元素。给定一个大小为 <code>n</code> 的数组，主要元素出现的次数必须超过 <code>n/2</code>。</p>
<h4 id="mcetoc_1i5jsiu2c15">算法思想</h4>
<p>算法的核心思想是：</p>
<ol>
<li><strong>候选人筛选</strong>：我们需要找到一个“候选人”作为主要元素。通过一次遍历，我们可以确定一个候选人，这个候选人有可能是主要元素。</li>
<li><strong>验证候选人</strong>：由于筛选出来的候选人不一定是主要元素，我们需要通过第二次遍历来验证这个候选人是否真的出现次数超过数组的一半。</li>
</ol>
<h4 id="mcetoc_1i5jsiu2c16">具体步骤</h4>
<p><strong>第一步：候选人筛选</strong></p>
<ol>
<li>
<p>初始化两个变量：</p>
<ul>
<li><code>candidate</code>：用于记录当前的候选元素。</li>
<li><code>count</code>：用于记录当前候选元素的出现次数。</li>
</ul>
</li>
<li>
<p>遍历整个数组：</p>
<ul>
<li>如果 <code>count</code> 为 <code>0</code>，表示当前没有候选人或前一个候选人已经被“淘汰”。此时将当前元素设置为新的候选人，并将 <code>count</code> 设为 <code>1</code>。</li>
<li>如果当前元素与 <code>candidate</code> 相同，则说明这个元素支持当前的候选人，增加 <code>count</code>。</li>
<li>如果当前元素与 <code>candidate</code> 不同，则认为这是一个反对票，减少 <code>count</code>。</li>
</ul>
</li>
</ol>
<p>通过上述遍历，我们可以找到一个最终的候选人 <code>candidate</code>。这个候选人有可能是主要元素，但我们还需要验证。</p>
<p><strong>第二步：验证候选人</strong></p>
<ol>
<li>初始化 <code>count</code> 为 <code>0</code>，然后再遍历数组。</li>
<li>每遇到一个与 <code>candidate</code> 相同的元素，就增加 <code>count</code>。</li>
<li>最后检查 <code>count</code> 是否大于 <code>n/2</code>：
<ul>
<li>如果是，说明 <code>candidate</code> 是主要元素，返回它。</li>
<li>如果不是，说明数组中没有主要元素，返回 <code>-1</code>。</li>
</ul>
</li>
</ol>
<h4 id="mcetoc_1i5jsiu2c17">为什么这个算法有效？</h4>
<p>要理解为什么这个算法有效，我们可以从以下角度来分析：</p>
<ul>
<li>
<p><strong>筛选过程的有效性</strong>：当 <code>count</code> 变为 <code>0</code> 时，表示我们目前没有候选人或之前的候选人已经被完全抵消（即遇到了足够多的不同元素来平衡掉候选人）。此时，我们选择当前的元素作为新的候选人。由于主要元素的数量超过总数的一半，它不可能被完全抵消，因此最终得到的候选人要么是主要元素，要么是非主要元素。</p>
</li>
<li>
<p><strong>验证过程的必要性</strong>：由于第一次筛选过程仅能保证筛选出一个潜在的候选人，因此我们需要第二次遍历来确认它是否真的出现次数超过一半。如果 <code>count</code> 大于 <code>n/2</code>，则它就是主要元素。</p>
</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>1252. 奇数值单元格的数目</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/1252-qi-shu-zhi-dan-yuan-ge-de-shu-mu.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/1252-qi-shu-zhi-dan-yuan-ge-de-shu-mu.html</id>
            <category term="力扣"/>

        <updated>2024-08-18T07:57:58+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i5hcdbnu1h">题目</a></li>
<li><a href="#mcetoc_1i5hcdbnu1i">代码</a></li>
<li><a href="#mcetoc_1i5hcdbnu1j">代码说明</a></li>
<li><a href="#mcetoc_1i5hcdbnu1k">参数说明</a></li>
</ul>
</div>
<h3 id="mcetoc_1i5hcdbnu1h">题目</h3>
<p>给你一个 <code>m x n</code> 的矩阵，最开始的时候，每个单元格中的值都是 <code>0</code>。</p>
<p>另有一个二维索引数组 <code>indices</code>，<code>indices[i] = [ri, ci]</code> 指向矩阵中的某个位置，其中 <code>ri</code> 和 <code>ci</code> 分别表示指定的行和列（<strong>从 <code>0</code> 开始编号</strong>）。</p>
<p>对 <code>indices[i]</code> 所指向的每个位置，应同时执行下述增量操作：</p>
<ol>
<li><code>r<sub>i</sub></code> 行上的所有单元格，加 <code>1</code> 。</li>
<li><code>c<sub>i</sub></code> 列上的所有单元格，加 <code>1</code> 。</li>
</ol>
<p>给你 <code>m</code>、<code>n</code> 和 <code>indices</code> 。请你在执行完所有 <code>indices</code> 指定的增量操作后，返回矩阵中 <strong>奇数值单元格</strong> 的数目。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<p><img loading="lazy" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/06/e1.png" alt="" data-is-external-image="true"></p>
<pre><strong>输入：</strong>m = 2, n = 3, indices = [[0,1],[1,1]]
<strong>输出：</strong>6
<strong>解释：</strong>最开始的矩阵是 [[0,0,0],[0,0,0]]。
第一次增量操作后得到 [[1,2,1],[0,1,0]]。
最后的矩阵是 [[1,3,1],[1,3,1]]，里面有 6 个奇数。
</pre>
<p><strong>示例 2：</strong></p>
<p><img loading="lazy" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/06/e2.png" alt="" data-is-external-image="true"></p>
<pre><strong>输入：</strong>m = 2, n = 2, indices = [[1,1],[0,0]]
<strong>输出：</strong>0
<strong>解释：</strong>最后的矩阵是 [[2,2],[2,2]]，里面没有奇数。</pre>
<h3 id="mcetoc_1i5hcdbnu1i">代码</h3>
<pre class="language-c line-numbers"><code>int oddCells(int m, int n, int** indices, int indicesSize, int* indicesColSize) {
    // 初始化行和列的增量计数
    int* row_count = (int*)calloc(m, sizeof(int));
    int* col_count = (int*)calloc(n, sizeof(int));
    
    // 对每个 indices 中的 (ri, ci) 进行操作
    for (int i = 0; i &lt; indicesSize; i++) {
        int ri = indices[i][0];
        int ci = indices[i][1];
        row_count[ri]++;
        col_count[ci]++;
    }
    
    // 计算奇数值单元格的数量
    int odd_count = 0;
    for (int i = 0; i &lt; m; i++) {
        for (int j = 0; j &lt; n; j++) {
            // 计算当前单元格的值
            int value = row_count[i] + col_count[j];
            if (value % 2 == 1) {
                odd_count++;
            }
        }
    }
    
    // 释放动态分配的内存
    free(row_count);
    free(col_count);
    
    return odd_count;
}</code></pre>
<h3 id="mcetoc_1i5hcdbnu1j">代码说明</h3>
<ol>
<li><strong>内存分配</strong>：使用 <code>calloc</code> 分别为 <code>row_count</code> 和 <code>col_count</code> 动态分配内存，并将其初始值设置为 0。</li>
<li><strong>操作增量</strong>：对每个索引 <code>[ri, ci]</code>，增加对应行和列的计数。</li>
<li><strong>计算奇数单元格</strong>：通过遍历每个单元格，计算其对应的行列增量和，如果结果是奇数，增加计数。</li>
<li><strong>释放内存</strong>：最后使用 <code>free</code> 释放动态分配的内存。</li>
</ol>
<h3 id="mcetoc_1i5hcdbnu1k">参数说明</h3>
<ul>
<li><code>m</code>：矩阵的行数。</li>
<li><code>n</code>：矩阵的列数。</li>
<li><code>indices</code>：二维索引数组。</li>
<li><code>indicesSize</code>：<code>indices</code> 数组的行数（即索引对的数量）。</li>
<li><code>indicesColSize</code>：每一行索引数组的列数（始终为 2）。</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>819. 最常见的单词</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/819-zui-chang-jian-de-dan-ci.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/819-zui-chang-jian-de-dan-ci.html</id>
            <category term="力扣"/>

        <updated>2024-08-17T07:28:34+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i5eoag1i11">题目</a></li>
<li><a href="#mcetoc_1i5eoag1i12">代码</a></li>
<li><a href="#mcetoc_1i5eoag1i13">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i5eoag1i11">题目</h3>
<p>给你一个字符串 <code>paragraph</code> 和一个表示禁用词的字符串数组 <code>banned</code> ，返回出现频率最高的非禁用词。题目数据 <strong>保证 </strong>至少存在一个非禁用词，且答案<strong> 唯一 </strong>。</p>
<p><code>paragraph</code> 中的单词 <strong>不区分大小写</strong> ，答案应以 <strong>小写 </strong>形式返回。</p>
<p> </p>
<p><strong class="example">示例 1：</strong></p>
<pre><strong>输入：</strong>paragraph = "Bob hit a ball, the hit BALL flew far after it was hit.", banned = ["hit"]
<strong>输出：</strong>"ball"
<strong>解释：</strong>
"hit" 出现了 3 次，但它是禁用词。
"ball" 出现了两次（没有其他单词出现这么多次），因此它是段落中出现频率最高的非禁用词。
请注意，段落中的单词不区分大小写，
标点符号会被忽略（即使它们紧挨着单词，如 "ball,"），
并且尽管 "hit" 出现的次数更多，但它不能作为答案，因为它是禁用词。
</pre>
<p><strong class="example">示例 2：</strong></p>
<pre><strong>输入：</strong>paragraph = "a.", banned = []
<strong>输出：</strong>"a"</pre>
<h3 id="mcetoc_1i5eoag1i12">代码</h3>
<pre class="language-c line-numbers"><code>#define MAX_WORD_LEN 100
#define MAX_PARA_LEN 10000

// 函数用于比较哈希表中存储的单词
typedef struct {
    char word[MAX_WORD_LEN];
    int count;
} HashTableEntry;

// 将字符串转换为小写
void toLowerCase(char* str) {
    while (*str) {
        *str = tolower(*str);
        str++;
    }
}

// 检查单词是否在禁用词列表中
int isBanned(char* word, char** banned, int bannedSize) {
    for (int i = 0; i &lt; bannedSize; i++) {
        if (strcmp(word, banned[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

// 从段落中提取下一个单词
char* nextWord(char* paragraph, int* index) {
    static char word[MAX_WORD_LEN];
    int i = 0;

    while (paragraph[*index]) {
        char c = paragraph[*index];
        if (isalpha(c)) {
            word[i++] = tolower(c);
        } else if (i &gt; 0) {
            break;
        }
        (*index)++;
    }

    word[i] = '\0';
    while (paragraph[*index] &amp;&amp; !isalpha(paragraph[*index])) {
        (*index)++;
    }

    return word[0] ? word : NULL;
}

char* mostCommonWord(char* paragraph, char** banned, int bannedSize) {
    HashTableEntry hashTable[MAX_PARA_LEN] = {0};
    int index = 0;
    int maxCount = 0;
    char* mostCommon = NULL;

    while (paragraph[index]) {
        char* word = nextWord(paragraph, &amp;index);
        if (!word || isBanned(word, banned, bannedSize)) {
            continue;
        }

        int found = 0;
        for (int i = 0; i &lt; MAX_PARA_LEN &amp;&amp; hashTable[i].word[0]; i++) {
            if (strcmp(hashTable[i].word, word) == 0) {
                hashTable[i].count++;
                found = 1;
                if (hashTable[i].count &gt; maxCount) {
                    maxCount = hashTable[i].count;
                    mostCommon = hashTable[i].word;
                }
                break;
            }
        }

        if (!found) {
            for (int i = 0; i &lt; MAX_PARA_LEN; i++) {
                if (hashTable[i].word[0] == '\0') {
                    strcpy(hashTable[i].word, word);
                    hashTable[i].count = 1;
                    if (hashTable[i].count &gt; maxCount) {
                        maxCount = 1;
                        mostCommon = hashTable[i].word;
                    }
                    break;
                }
            }
        }
    }

    return mostCommon;
}</code></pre>
<h3 id="mcetoc_1i5eoag1i13">解释</h3>
<ol>
<li><strong>字符串转换为小写</strong>：在处理段落时，所有单词都会被转换为小写，以确保比较时不区分大小写。</li>
<li><strong>提取单词</strong>：使用 <code>nextWord</code> 函数从段落中依次提取单词，并跳过标点符号和空格。</li>
<li><strong>检查禁用词</strong>：每个提取的单词都会与禁用词列表进行比较，如果是禁用词则跳过。</li>
<li><strong>计数与哈希表</strong>：通过哈希表存储每个单词及其出现次数，并更新频率最高的非禁用词。</li>
<li><strong>返回结果</strong>：最终返回频率最高的非禁用词。</li>
</ol>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>1295. 统计位数为偶数的数字</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/1295-tong-ji-wei-shu-wei-ou-shu-de-shu-zi.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/1295-tong-ji-wei-shu-wei-ou-shu-de-shu-zi.html</id>
            <category term="力扣"/>

        <updated>2024-08-16T07:54:58+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <h3>题目</h3>
<p>给你一个整数数组 <code>nums</code>，请你返回其中位数为 <strong>偶数</strong> 的数字的个数。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>nums = [12,345,2,6,7896]
<strong>输出：</strong>2
<strong>解释：
</strong>12 是 2 位数字（位数为偶数） 
345 是 3 位数字（位数为奇数）  
2 是 1 位数字（位数为奇数） 
6 是 1 位数字 位数为奇数） 
7896 是 4 位数字（位数为偶数）  
因此只有 12 和 7896 是位数为偶数的数字
</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>nums = [555,901,482,1771]
<strong>输出：</strong>1 
<strong>解释： </strong>
只有 1771 是位数为偶数的数字。</pre>
<h3>代码</h3>
<pre class="language-c line-numbers"><code>int findNumbers(int* nums, int numsSize) {
    int count = 0;
    for (int i = 0; i &lt; numsSize; i++) {
        int k = 0;
        for (int j = nums[i]; j != 0; k++) {
            j = j / 10;
        }
        if (k % 2 == 0) {
            count++;
        }
    }
    return count;
}</code></pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>2525. 根据规则将箱子分类</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/2525-gen-ju-gui-ze-jiang-xiang-zi-fen-lei.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/2525-gen-ju-gui-ze-jiang-xiang-zi-fen-lei.html</id>
            <category term="力扣"/>

        <updated>2024-08-15T07:43:20+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i59kcaatr">题目</a></li>
<li><a href="#mcetoc_1i59kcaats">代码</a></li>
<li><a href="#mcetoc_1i59kcaatt">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i59kcaatr">题目</h3>
<p>给你四个整数 <code>length</code> ，<code>width</code> ，<code>height</code> 和 <code>mass</code> ，分别表示一个箱子的三个维度和质量，请你返回一个表示箱子 <strong>类别</strong> 的字符串。</p>
<ul>
<li>如果满足以下条件，那么箱子是 <code>"Bulky"</code> 的：
<ul>
<li>箱子 <strong>至少有一个</strong> 维度大于等于 <code>10<sup>4</sup></code> 。</li>
<li>或者箱子的 <strong>体积</strong> 大于等于 <code>10<sup>9</sup></code> 。</li>
</ul>
</li>
<li>如果箱子的质量大于等于 <code>100</code> ，那么箱子是 <code>"Heavy"</code> 的。</li>
<li>如果箱子同时是 <code>"Bulky"</code> 和 <code>"Heavy"</code> ，那么返回类别为 <code>"Both"</code> 。</li>
<li>如果箱子既不是 <code>"Bulky"</code> ，也不是 <code>"Heavy"</code> ，那么返回类别为 <code>"Neither"</code> 。</li>
<li>如果箱子是 <code>"Bulky"</code> 但不是 <code>"Heavy"</code> ，那么返回类别为 <code>"Bulky"</code> 。</li>
<li>如果箱子是 <code>"Heavy"</code> 但不是 <code>"Bulky"</code> ，那么返回类别为 <code>"Heavy"</code> 。</li>
</ul>
<p><strong>注意</strong>，箱子的体积等于箱子的长度、宽度和高度的乘积。</p>
<h3 id="mcetoc_1i59kcaats">代码</h3>
<pre class="language-c line-numbers"><code>char* categorizeBox(int length, int width, int height, int mass) {
    long long volume = (long long)length * width * height;
    int isBulky = length &gt;= 10000 || width &gt;= 10000 || height &gt;= 10000 || volume &gt;= 1000000000;
    int isHeavy = mass &gt;= 100;

    if (isBulky &amp;&amp; isHeavy) {
        return "Both";
    } else if (isBulky) {
        return "Bulky";
    } else if (isHeavy) {
        return "Heavy";
    } else {
        return "Neither";
    }
}</code></pre>
<h3 id="mcetoc_1i59kcaatt">解释</h3>
<ol>
<li>计算体积 <code>volume</code>。</li>
<li>检查是否为“Bulky”：如果任一维度大于等于 10,000 或者体积大于等于 10^9，则标记为 Bulky。</li>
<li>检查是否为“Heavy”：如果质量大于等于 100，则标记为 Heavy。</li>
<li>根据条件返回相应的类别：<code>Both</code>、<code>Bulky</code>、<code>Heavy</code> 或 <code>Neither</code>。</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>1880. 检查某单词是否等于两单词之和</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/1880-jian-cha-mou-dan-ci-shi-fou-deng-yu-liang-dan-ci-zhi-he.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/1880-jian-cha-mou-dan-ci-shi-fou-deng-yu-liang-dan-ci-zhi-he.html</id>
            <category term="力扣"/>

        <updated>2024-08-14T07:56:56+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i572omh714">题目</a></li>
<li><a href="#mcetoc_1i572omh715">代码</a></li>
<li><a href="#mcetoc_1i572omh716">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i572omh714">题目</h3>
<p>字母的 <strong>字母值</strong> 取决于字母在字母表中的位置，<strong>从 0 开始</strong> 计数。即，<code>'a' -&gt; 0</code>、<code>'b' -&gt; 1</code>、<code>'c' -&gt; 2</code>，以此类推。</p>
<p>对某个由小写字母组成的字符串 <code>s</code> 而言，其 <strong>数值</strong> 就等于将 <code>s</code> 中每个字母的 <strong>字母值</strong> 按顺序 <strong>连接</strong> 并 <strong>转换</strong> 成对应整数。</p>
<ul>
<li>例如，<code>s = "acb"</code> ，依次连接每个字母的字母值可以得到 <code>"021"</code> ，转换为整数得到 <code>21</code> 。</li>
</ul>
<p>给你三个字符串 <code>firstWord</code>、<code>secondWord</code> 和 <code>targetWord</code> ，每个字符串都由从 <code>'a'</code> 到 <code>'j'</code> （<strong>含 </strong><code>'a'</code> 和 <code>'j'</code><strong> </strong>）的小写英文字母组成。</p>
<p>如果 <code>firstWord</code><em> </em>和<em> </em><code>secondWord</code> 的 <strong>数值之和</strong> 等于<em> </em><code>targetWord</code><em> </em>的数值，返回 <code>true</code> ；否则，返回<em> </em><code>false</code><em> </em>。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>firstWord = "acb", secondWord = "cba", targetWord = "cdb"
<strong>输出：</strong>true
<strong>解释：</strong>
firstWord 的数值为 "acb" -&gt; "021" -&gt; 21
secondWord 的数值为 "cba" -&gt; "210" -&gt; 210
targetWord 的数值为 "cdb" -&gt; "231" -&gt; 231
由于 21 + 210 == 231 ，返回 true
</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>firstWord = "aaa", secondWord = "a", targetWord = "aab"
<strong>输出：</strong>false
<strong>解释：</strong>
firstWord 的数值为 "aaa" -&gt; "000" -&gt; 0
secondWord 的数值为 "a" -&gt; "0" -&gt; 0
targetWord 的数值为 "aab" -&gt; "001" -&gt; 1
由于 0 + 0 != 1 ，返回 false</pre>
<p><strong>示例 3：</strong></p>
<pre><strong>输入：</strong>firstWord = "aaa", secondWord = "a", targetWord = "aaaa"
<strong>输出：</strong>true
<strong>解释：</strong>
firstWord 的数值为 "aaa" -&gt; "000" -&gt; 0
secondWord 的数值为 "a" -&gt; "0" -&gt; 0
targetWord 的数值为 "aaaa" -&gt; "0000" -&gt; 0
由于 0 + 0 == 0 ，返回 true</pre>
<h3 id="mcetoc_1i572omh715">代码</h3>
<pre class="language-c line-numbers"><code>int wordToNumber(char* word) {
    int number = 0;
    while (*word) {
        number = number * 10 + (*word - 'a');
        word++;
    }
    return number;
}

bool isSumEqual(char* firstWord, char* secondWord, char* targetWord) {
    // 将 firstWord 和 secondWord 转换为数值
    int firstValue = wordToNumber(firstWord);
    int secondValue = wordToNumber(secondWord);
    int targetValue = wordToNumber(targetWord);
    
    // 检查它们的数值之和是否等于 targetWord 的数值
    return (firstValue + secondValue == targetValue);
}</code></pre>
<h3 id="mcetoc_1i572omh716">解释</h3>
<ul>
<li>
<p><strong><code>wordToNumber</code> 函数</strong>: 使用 <code>(*word - 'a')</code> 计算字母的字母值。例如，<code>'a'</code> 的 ASCII 值是 97，所以 <code>'a' - 'a'</code> 结果为 <code>0</code>，而 <code>'b' - 'a'</code> 结果为 <code>1</code>，以此类推。</p>
</li>
<li>
<p><strong>主逻辑</strong>: 将 <code>firstWord</code> 和 <code>secondWord</code> 转换为数值并相加，然后与 <code>targetWord</code> 的数值进行比较。</p>
</li>
</ul>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>LCP 51. 烹饪料理</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/lcp-51-peng-ren-liao-li.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/lcp-51-peng-ren-liao-li.html</id>
            <category term="力扣"/>

        <updated>2024-08-13T07:47:41+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i54fqr0a3m">题目</a></li>
<li><a href="#mcetoc_1i54fqr0a3n">代码</a></li>
<li><a href="#mcetoc_1i54fqr0a3o">解释</a>
<ul>
<li><a href="#mcetoc_1i54fqr0a3p">关键思路</a></li>
<li><a href="#mcetoc_1i54fqr0a3q">具体流程</a></li>
<li><a href="#mcetoc_1i54fqr0a3r">为什么不用动态规划？</a></li>
</ul>
</li>
</ul>
</div>
<h3 id="mcetoc_1i54fqr0a3m">题目</h3>
<p>勇者背包内共有编号为 <code>0 ~ 4</code> 的五种食材，其中 <code>materials[j]</code> 表示第 <code>j</code> 种食材的数量。通过这些食材可以制作若干料理，<code>cookbooks[i][j]</code> 表示制作第 <code>i</code> 种料理需要第 <code>j</code> 种食材的数量，而 <code>attribute[i] = [x,y]</code> 表示第 <code>i</code> 道料理的美味度 <code>x</code> 和饱腹感 <code>y</code>。</p>
<p>在饱腹感不小于 <code>limit</code> 的情况下，请返回勇者可获得的最大美味度。如果无法满足饱腹感要求，则返回 <code>-1</code>。</p>
<p><strong>注意：</strong></p>
<ul>
<li>每种料理只能制作一次。</li>
</ul>
<p><strong>示例 1：</strong></p>
<blockquote>
<p>输入：<code>materials = [3,2,4,1,2]</code> <code>cookbooks = [[1,1,0,1,2],[2,1,4,0,0],[3,2,4,1,0]]</code> <code>attribute = [[3,2],[2,4],[7,6]]</code> <code>limit = 5</code></p>
<p>输出：<code>7</code></p>
<p>解释： 食材数量可以满足以下两种方案： 方案一：制作料理 0 和料理 1，可获得饱腹感 2+4、美味度 3+2 方案二：仅制作料理 2， 可饱腹感为 6、美味度为 7 因此在满足饱腹感的要求下，可获得最高美味度 7</p>
</blockquote>
<p><strong>示例 2：</strong></p>
<blockquote>
<p>输入：<code>materials = [10,10,10,10,10]</code> <code>cookbooks = [[1,1,1,1,1],[3,3,3,3,3],[10,10,10,10,10]]</code> <code>attribute = [[5,5],[6,6],[10,10]]</code> <code>limit = 1</code></p>
<p>输出：<code>11</code></p>
<p>解释：通过制作料理 0 和 1，可满足饱腹感，并获得最高美味度 11</p>
</blockquote>
<h3 id="mcetoc_1i54fqr0a3n">代码</h3>
<pre class="language-c line-numbers"><code>#include &lt;stdio.h&gt;

int max(int a, int b) {
    return a &gt; b ? a : b;
}

void dfs(int* materials, int materialsSize, int** cookbooks, int cookbooksSize, int** attribute, int limit, int index, int currentDelicious, int currentFullness, int* maxDelicious) {
    // 如果当前饱腹感已经大于等于 limit
    if (currentFullness &gt;= limit) {
        *maxDelicious = max(*maxDelicious, currentDelicious);
    }

    // 遍历每一种料理
    for (int i = index; i &lt; cookbooksSize; i++) {
        int canCook = 1;

        // 检查是否有足够的食材来制作这道料理
        for (int j = 0; j &lt; materialsSize; j++) {
            if (materials[j] &lt; cookbooks[i][j]) {
                canCook = 0;
                break;
            }
        }

        if (canCook) {
            // 做这道料理，更新材料剩余数量
            for (int j = 0; j &lt; materialsSize; j++) {
                materials[j] -= cookbooks[i][j];
            }

            // 递归调用，继续尝试制作下一道料理
            dfs(materials, materialsSize, cookbooks, cookbooksSize, attribute, limit, i + 1, currentDelicious + attribute[i][0], currentFullness + attribute[i][1], maxDelicious);

            // 回溯，恢复材料剩余数量
            for (int j = 0; j &lt; materialsSize; j++) {
                materials[j] += cookbooks[i][j];
            }
        }
    }
}

int perfectMenu(int* materials, int materialsSize, int** cookbooks, int cookbooksSize, int* cookbooksColSize, int** attribute, int attributeSize, int* attributeColSize, int limit) {
    int maxDelicious = -1;

    dfs(materials, materialsSize, cookbooks, cookbooksSize, attribute, limit, 0, 0, 0, &amp;maxDelicious);

    return maxDelicious;
}
</code></pre>
<h3 id="mcetoc_1i54fqr0a3o">解释</h3>
<p>这道题的核心在于如何选择一组料理，使得在满足饱腹感的前提下，获得最大的美味度。这实际上是一个经典的「0-1 背包问题」的变种，只不过背包的容量和价值都多维化了，因此不能直接使用动态规划来解决，而是使用深度优先搜索（DFS）进行组合的枚举。</p>
<h4 id="mcetoc_1i54fqr0a3p">关键思路</h4>
<ol>
<li>
<p><strong>深度优先搜索 (DFS)</strong>：DFS 是一种遍历或搜索树或图的算法。在这里，DFS 用来遍历所有可能的料理组合。通过递归的方法，我们从头到尾尝试每一种料理的组合。</p>
</li>
<li>
<p><strong>剪枝（提前停止不必要的计算）</strong>：在递归过程中，首先检查当前的食材是否足够制作某个料理。如果某个料理需要的食材超出了勇者的拥有量，我们就不再继续下去，这样可以减少无效的搜索。</p>
</li>
<li>
<p><strong>回溯</strong>：回溯是一种通过撤销某些选择来恢复原状的技术。在这道题中，当我们尝试制作某个料理时，会减少相应的食材数量；如果在接下来的搜索中发现这条路不合适，我们就会恢复食材的数量，然后尝试其他的组合。</p>
</li>
<li>
<p><strong>终止条件</strong>：当我们遍历完所有可能的料理组合后，检查当前组合的饱腹感是否满足要求，如果满足，就更新最大美味度。</p>
</li>
<li>
<p><strong>返回结果</strong>：最后，我们会返回遍历中找到的最大美味度值。如果遍历完所有组合后，没有任何一个组合能满足饱腹感要求，就返回 <code>-1</code>。</p>
</li>
</ol>
<h4 id="mcetoc_1i54fqr0a3q">具体流程</h4>
<p>假设你有 5 种食材，可以制作若干种料理，每种料理都有特定的美味度和饱腹感。目标是在至少达到某个饱腹感的前提下，最大化获得的美味度。</p>
<ul>
<li>
<p><strong>初始化</strong>：从第一个料理开始，初始的美味度和饱腹感为 <code>0</code>。</p>
</li>
<li>
<p><strong>递归搜索</strong>：对于每个料理，我们有两种选择：要么制作它，要么不制作它。如果制作它，就更新当前的美味度和饱腹感，并减少相应的食材数量；然后递归地进行下一道料理的选择。</p>
</li>
<li>
<p><strong>更新结果</strong>：每当发现一个新的组合能满足饱腹感要求时，比较其美味度是否超过当前已知的最大值。如果超过，则更新最大美味度。</p>
</li>
<li>
<p><strong>回溯</strong>：在返回上一层递归之前，恢复之前减少的食材数量，确保其他组合的尝试不会受到影响。</p>
</li>
</ul>
<h4 id="mcetoc_1i54fqr0a3r">为什么不用动态规划？</h4>
<p>动态规划通常用于处理「0-1 背包问题」，但这道题的复杂性在于：</p>
<ul>
<li>每种料理需要的食材种类不同，无法简单地用一个二维表来表示状态。</li>
<li>需要对每种料理的组合进行判断，处理多个维度（美味度和饱腹感）的问题。</li>
</ul>
            ]]>
        </content>
    </entry>
</feed>
