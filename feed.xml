<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>xcll’s blog</title>
    <link href="https://hxfcoy.github.io/xcll.github.io/feed.xml" rel="self" />
    <link href="https://hxfcoy.github.io/xcll.github.io" />
    <updated>2024-08-28T21:30:59+08:00</updated>
    <author>
        <name>fcoy</name>
    </author>
    <id>https://hxfcoy.github.io/xcll.github.io</id>

    <entry>
        <title>225. 用队列实现栈</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/225-yong-dui-lie-shi-xian-zhan.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/225-yong-dui-lie-shi-xian-zhan.html</id>
            <category term="力扣"/>

        <updated>2024-08-28T21:30:59+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i6cit80c7">题目</a></li>
<li><a href="#mcetoc_1i6cit80c8">代码</a></li>
</ul>
</div>
<h3 id="mcetoc_1i6cit80c7">题目</h3>
<p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p>
<p>实现 <code>MyStack</code> 类：</p>
<ul>
<li><code>void push(int x)</code> 将元素 x 压入栈顶。</li>
<li><code>int pop()</code> 移除并返回栈顶元素。</li>
<li><code>int top()</code> 返回栈顶元素。</li>
<li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>
</ul>
<p> </p>
<p><strong>注意：</strong></p>
<ul>
<li>你只能使用队列的标准操作 —— 也就是 <code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和 <code>is empty</code> 这些操作。</li>
<li>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li>
</ul>
<p> </p>
<p><strong>示例：</strong></p>
<pre><strong>输入：</strong>
["MyStack", "push", "push", "top", "pop", "empty"]
[[], [1], [2], [], [], []]
<strong>输出：</strong>
[null, null, null, 2, 2, false]

<strong>解释：</strong>
MyStack myStack = new MyStack();
myStack.push(1);
myStack.push(2);
myStack.top(); // 返回 2
myStack.pop(); // 返回 2
myStack.empty(); // 返回 False
</pre>
<h3 id="mcetoc_1i6cit80c8">代码</h3>
<pre class="language-c line-numbers"><code>typedef struct {
    int data[100]; // 假设栈最大存储100个元素
    int front;
    int rear;
} Queue;

typedef struct {
    Queue* queue1;
    Queue* queue2;
} MyStack;

// 创建一个队列
Queue* createQueue() {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue-&gt;front = 0;
    queue-&gt;rear = 0;
    return queue;
}

// 判断队列是否为空
bool isEmpty(Queue* queue) { return queue-&gt;front == queue-&gt;rear; }

// 队列的入队操作
void enqueue(Queue* queue, int x) { queue-&gt;data[queue-&gt;rear++] = x; }

// 队列的出队操作
int dequeue(Queue* queue) { return queue-&gt;data[queue-&gt;front++]; }

// 获取队列的队头元素
int front(Queue* queue) { return queue-&gt;data[queue-&gt;front]; }

// 创建栈
MyStack* myStackCreate() {
    MyStack* stack = (MyStack*)malloc(sizeof(MyStack));
    stack-&gt;queue1 = createQueue();
    stack-&gt;queue2 = createQueue();
    return stack;
}

// 压入栈操作
void myStackPush(MyStack* obj, int x) {
    enqueue(obj-&gt;queue2, x);
    while (!isEmpty(obj-&gt;queue1)) {
        enqueue(obj-&gt;queue2, dequeue(obj-&gt;queue1));
    }
    // 交换queue1和queue2
    Queue* temp = obj-&gt;queue1;
    obj-&gt;queue1 = obj-&gt;queue2;
    obj-&gt;queue2 = temp;
}

// 弹出栈顶元素
int myStackPop(MyStack* obj) { return dequeue(obj-&gt;queue1); }

// 获取栈顶元素
int myStackTop(MyStack* obj) { return front(obj-&gt;queue1); }

// 判断栈是否为空
bool myStackEmpty(MyStack* obj) { return isEmpty(obj-&gt;queue1); }

// 释放栈资源
void myStackFree(MyStack* obj) {
    free(obj-&gt;queue1);
    free(obj-&gt;queue2);
    free(obj);
}</code></pre>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>598. 区间加法 II</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/598-qu-jian-jia-fa-ii.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/598-qu-jian-jia-fa-ii.html</id>
            <category term="力扣"/>

        <updated>2024-08-27T07:25:59+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i68g59h010">题目</a></li>
<li><a href="#mcetoc_1i68g59h011">代码</a></li>
<li><a href="#mcetoc_1i68g59h012">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i68g59h010">题目</h3>
<p>给你一个 <code>m x n</code> 的矩阵 <code>M</code><strong> </strong>和一个操作数组 <code>op</code> 。矩阵初始化时所有的单元格都为 <code>0</code> 。<code>ops[i] = [ai, bi]</code> 意味着当所有的 <code>0 &lt;= x &lt; ai</code> 和 <code>0 &lt;= y &lt; bi</code> 时， <code>M[x][y]</code> 应该加 1。</p>
<p>在 <em>执行完所有操作后</em> ，计算并返回 <em>矩阵中最大整数的个数</em> 。</p>
<p> </p>
<p><strong>示例 1:</strong></p>
<p><img loading="lazy" src="https://assets.leetcode.com/uploads/2020/10/02/ex1.jpg" alt="" data-is-external-image="true"></p>
<pre><strong>输入:</strong> m = 3, n = 3，ops = [[2,2],[3,3]]
<strong>输出:</strong> 4
<strong>解释:</strong> M 中最大的整数是 2, 而且 M 中有4个值为2的元素。因此返回 4。
</pre>
<p><strong>示例 2:</strong></p>
<pre><strong>输入:</strong> m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]
<strong>输出:</strong> 4
</pre>
<p><strong>示例 3:</strong></p>
<pre><strong>输入:</strong> m = 3, n = 3, ops = []
<strong>输出:</strong> 9</pre>
<h3 id="mcetoc_1i68g59h011">代码</h3>
<pre class="language-c line-numbers"><code>int maxCount(int m, int n, int** ops, int opsSize, int* opsColSize) {
    int minA = m;
    int minB = n;
    
    for (int i = 0; i &lt; opsSize; i++) {
        if (ops[i][0] &lt; minA) {
            minA = ops[i][0];
        }
        if (ops[i][1] &lt; minB) {
            minB = ops[i][1];
        }
    }
    
    return minA * minB;
}</code></pre>
<h3 id="mcetoc_1i68g59h012">解释</h3>
<p>可以通过数学的方法来解决，而不需要真正构建整个矩阵。每次操作 <code>[ai, bi]</code> 会影响到矩阵左上角大小为 <code>ai x bi</code> 的子矩阵，使得这个子矩阵中的所有元素都加 1。矩阵中最大整数的值必定出现在所有操作影响的最小范围内，即所有 <code>[ai, bi]</code> 中的最小 <code>ai</code> 和最小 <code>bi</code> 组成的子矩阵。</p>
<p>因此，最大整数的个数就是最小 <code>ai</code> 和最小 <code>bi</code> 的乘积。</p>
<ol>
<li>初始化 <code>minA = m</code> 和 <code>minB = n</code>。</li>
<li>遍历操作数组 <code>ops</code>，对于每个操作 <code>[ai, bi]</code>：
<ul>
<li>更新 <code>minA = min(minA, ai)</code>。</li>
<li>更新 <code>minB = min(minB, bi)</code>。</li>
</ul>
</li>
<li>最后，最大整数的个数就是 <code>minA * minB</code>。</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>1185. 一周中的第几天</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/1185-yi-zhou-zhong-de-di-ji-tian.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/1185-yi-zhou-zhong-de-di-ji-tian.html</id>
            <category term="力扣"/>

        <updated>2024-08-25T07:09:46+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i63ae54o30">题目</a></li>
<li><a href="#mcetoc_1i63ae54o31">代码</a></li>
<li><a href="#mcetoc_1i63ae54o32">蔡勒公式</a></li>
<li><a href="#mcetoc_1i63ae54o33">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i63ae54o30">题目</h3>
<p>给你一个日期，请你设计一个算法来判断它是对应一周中的哪一天。</p>
<p>输入为三个整数：<code>day</code>、<code>month</code> 和 <code>year</code>，分别表示日、月、年。</p>
<p>您返回的结果必须是这几个值中的一个 <code>{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}</code>。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>day = 31, month = 8, year = 2019
<strong>输出：</strong>"Saturday"
</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>day = 18, month = 7, year = 1999
<strong>输出：</strong>"Sunday"
</pre>
<p><strong>示例 3：</strong></p>
<pre><strong>输入：</strong>day = 15, month = 8, year = 1993
<strong>输出：</strong>"Sunday"</pre>
<p> </p>
<h3 id="mcetoc_1i63ae54o31">代码</h3>
<pre class="language-c line-numbers"><code>char* dayOfTheWeek(int day, int month, int year) {
    // 如果月份是1月或2月，将月份变为上一年的13月或14月
    if (month == 1 || month == 2) {
        month += 12;
        year -= 1;
    }
    
    int K = year % 100; // 年份的后两位
    int J = year / 100; // 年份的前两位
    
    int h = (day + (13 * (month + 1)) / 5 + K + K / 4 + J / 4 + 5 * J) % 7;
    
    // 映射h的值到星期几
    char* daysOfWeek[] = {"Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};
    
    return daysOfWeek[h];
}</code></pre>
<h3 id="mcetoc_1i63ae54o32">蔡勒公式</h3>
<p>公式的具体形式为：<figure class="post__image"><img loading="lazy"  src="https://hxfcoy.github.io/xcll.github.io/media/posts/32/1.png" alt="" width="921" height="634" sizes="100vw" srcset="https://hxfcoy.github.io/xcll.github.io/media/posts/32/responsive/1-xs.png 300w ,https://hxfcoy.github.io/xcll.github.io/media/posts/32/responsive/1-sm.png 480w ,https://hxfcoy.github.io/xcll.github.io/media/posts/32/responsive/1-md.png 768w ,https://hxfcoy.github.io/xcll.github.io/media/posts/32/responsive/1-lg.png 1024w ,https://hxfcoy.github.io/xcll.github.io/media/posts/32/responsive/1-xl.png 1360w ,https://hxfcoy.github.io/xcll.github.io/media/posts/32/responsive/1-2xl.png 1600w"></figure>
<h3 id="mcetoc_1i63ae54o33">解释</h3>
<ol>
<li>
<p><strong>月份调整</strong>：</p>
<ul>
<li>如果输入的月份是1月或2月，将其视为上一年的13月或14月（按照蔡勒公式），因此年份需要减1。</li>
</ul>
</li>
<li>
<p><strong>计算K和J</strong>：</p>
<ul>
<li><code>K</code>是年份的后两位数。</li>
<li><code>J</code>是年份的前两位数。</li>
</ul>
</li>
<li>
<p><strong>蔡勒公式</strong>：</p>
<ul>
<li>使用公式计算出<code>h</code>，即从<code>0</code>到<code>6</code>之间的一个数，代表星期几。结果 <code>h</code> 对应的 <code>daysOfWeek</code> 数组的索引。</li>
<li>数组 <code>daysOfWeek</code> 按照星期六到星期五的顺序保存了对应的字符串。</li>
</ul>
</li>
<li>
<p><strong>返回结果</strong>：</p>
<ul>
<li>根据计算出的<code>h</code>，返回对应的星期字符串。</li>
</ul>
</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>2578. 最小和分割</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/2578-zui-xiao-he-fen-ge.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/2578-zui-xiao-he-fen-ge.html</id>
            <category term="力扣"/>

        <updated>2024-08-24T07:50:33+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i60qc4g3i">题目</a></li>
<li><a href="#mcetoc_1i60qc4g3j">代码</a></li>
<li><a href="#mcetoc_1i60qc4g3k">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i60qc4g3i">题目</h3>
<p>给你一个正整数 <code>num</code> ，请你将它分割成两个非负整数 <code>num1</code> 和 <code>num2</code> ，满足：</p>
<ul>
<li><code>num1</code> 和 <code>num2</code> 直接连起来，得到 <code>num</code> 各数位的一个排列。
<ul>
<li>换句话说，<code>num1</code> 和 <code>num2</code> 中所有数字出现的次数之和等于 <code>num</code> 中所有数字出现的次数。</li>
</ul>
</li>
<li><code>num1</code> 和 <code>num2</code> 可以包含前导 0 。</li>
</ul>
<p>请你返回 <code>num1</code> 和 <code>num2</code> 可以得到的和的 <strong>最小</strong> 值。</p>
<p><strong>注意：</strong></p>
<ul>
<li><code>num</code> 保证没有前导 0 。</li>
<li><code>num1</code> 和 <code>num2</code> 中数位顺序可以与 <code>num</code> 中数位顺序不同。
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>num = 4325
<strong>输出：</strong>59
<strong>解释：</strong>我们可以将 4325 分割成 <code>num1 </code>= 24 和 <code>num2 </code>= 35 ，和为 59 ，59 是最小和。</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>num = 687
<strong>输出：</strong>75
<strong>解释：</strong>我们可以将 687 分割成 <code>num1</code> = 68 和 <code>num2 </code>= 7 ，和为最优值 75 。</pre>
</li>
</ul>
<h3 id="mcetoc_1i60qc4g3j">代码</h3>
<pre class="language-c line-numbers"><code>int compare(const void *a, const void *b) {
    return (*(char *)a - *(char *)b);
}

int splitNum(int num) {
    char digits[12];  // 用于存储数字的各个字符（考虑到整数的长度最大为11位）
    sprintf(digits, "%d", num);  // 将数字转换为字符串
    int len = strlen(digits);    // 获取字符串长度

    // 对字符数组进行排序
    qsort(digits, len, sizeof(char), compare);

    char num1[12] = {0};  // 存储结果num1
    char num2[12] = {0};  // 存储结果num2
    int idx1 = 0, idx2 = 0;

    // 交替分配字符给num1和num2
    for (int i = 0; i &lt; len; i++) {
        if (i % 2 == 0) {
            num1[idx1++] = digits[i];
        } else {
            num2[idx2++] = digits[i];
        }
    }

    // 将num1和num2转换为整数并返回它们的和
    return atoi(num1) + atoi(num2);
}</code></pre>
<h3 id="mcetoc_1i60qc4g3k">解释</h3>
<ol>
<li>
<p><strong><code>compare</code>函数</strong>:</p>
<ul>
<li>这是用于<code>qsort</code>函数的比较器函数，用于按升序排序字符。</li>
</ul>
</li>
<li>
<p><strong><code>splitNum</code>函数</strong>:</p>
<ul>
<li><code>digits</code>：将数字转换成字符串后，存储它的各个位。</li>
<li><code>qsort</code>：对字符数组进行排序。</li>
<li><code>num1</code>和<code>num2</code>：用于存储结果数字的字符串。</li>
<li><code>idx1</code>和<code>idx2</code>：分别用于<code>num1</code>和<code>num2</code>的索引。</li>
<li>最后将<code>num1</code>和<code>num2</code>转换为整数，并返回它们的和。</li>
</ul>
</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>2553. 分割数组中数字的数位</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/2553-fen-ge-shu-zu-zhong-shu-zi-de-shu-wei.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/2553-fen-ge-shu-zu-zhong-shu-zi-de-shu-wei.html</id>
            <category term="力扣"/>

        <updated>2024-08-23T07:43:21+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i5u7hhce7">题目</a></li>
<li><a href="#mcetoc_1i5u7hhce8">代码</a></li>
<li><a href="#mcetoc_1i5u7i7g9c">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i5u7hhce7">题目</h3>
<p>给你一个正整数数组 <code>nums</code> ，请你返回一个数组<em> </em><code>answer</code> ，你需要将 <code>nums</code> 中每个整数进行数位分割后，按照 <code>nums</code> 中出现的 <strong>相同顺序</strong> 放入答案数组中。</p>
<p>对一个整数进行数位分割，指的是将整数各个数位按原本出现的顺序排列成数组。</p>
<ul>
<li>比方说，整数 <code>10921</code> ，分割它的各个数位得到 <code>[1,0,9,2,1]</code> 。</li>
</ul>
<p> </p>
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>nums = [13,25,83,77]
<strong>输出：</strong>[1,3,2,5,8,3,7,7]
<strong>解释：</strong>
- 分割 13 得到 [1,3] 。
- 分割 25 得到 [2,5] 。
- 分割 83 得到 [8,3] 。
- 分割 77 得到 [7,7] 。
answer = [1,3,2,5,8,3,7,7] 。answer 中的数字分割结果按照原数字在数组中的相同顺序排列。
</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>nums = [7,1,3,9]
<strong>输出：</strong>[7,1,3,9]
<strong>解释：</strong>nums 中每个整数的分割是它自己。
answer = [7,1,3,9] 。</pre>
<h3 id="mcetoc_1i5u7hhce8">代码</h3>
<pre class="language-c line-numbers"><code>int countDigits(int num) {
    int count = 0;
    while (num != 0) {
        num /= 10;
        count++;
    }
    return count;
}

// 将整数 num 的各个数位分割并存储到 result 数组中
void splitDigits(int num, int* result, int* index) {
    int digits[10];
    int i = 0;
    
    // 提取各个位数并存储到临时数组 digits 中
    do {
        digits[i++] = num % 10;
        num /= 10;
    } while (num &gt; 0);

    // 将各位数按照正确的顺序存入 result 数组
    while (i &gt; 0) {
        result[(*index)++] = digits[--i];
    }
}

int* separateDigits(int* nums, int numsSize, int* returnSize) {
    // 计算分割后的总数位数量
    int totalDigits = 0;
    for (int i = 0; i &lt; numsSize; i++) {
        totalDigits += countDigits(nums[i]);
    }

    // 分配存储结果的数组
    int* result = (int*)malloc(totalDigits * sizeof(int));
    *returnSize = totalDigits;

    int index = 0;
    for (int i = 0; i &lt; numsSize; i++) {
        splitDigits(nums[i], result, &amp;index);
    }

    return result;
}</code></pre>
<h3 id="mcetoc_1i5u7i7g9c">解释</h3>
<ol>
<li><strong>countDigits</strong> 函数用于计算一个整数的位数。</li>
<li><strong>splitDigits</strong> 函数将整数的各个数位分割，并按顺序存储到结果数组中。</li>
<li><strong>separateDigits</strong> 函数是核心函数，它调用 <code>countDigits</code> 计算所有数位的总和以分配结果数组的大小，然后调用 <code>splitDigits</code> 将每个整数分割并按顺序存储。</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>724. 寻找数组的中心下标</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/724-xun-zhao-shu-zu-de-zhong-xin-xia-biao.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/724-xun-zhao-shu-zu-de-zhong-xin-xia-biao.html</id>
            <category term="力扣"/>

        <updated>2024-08-22T18:56:01+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i5srl6ett">题目</a></li>
<li><a href="#mcetoc_1i5srl6etu">代码</a></li>
<li><a href="#mcetoc_1i5srl6etv">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i5srl6ett">题目</h3>
<p>给你一个整数数组 <code>nums</code> ，请计算数组的 <strong>中心下标 </strong>。</p>
<p>数组<strong> 中心下标</strong><strong> </strong>是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p>
<p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code> ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p>
<p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong> 的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>nums = [1, 7, 3, 6, 5, 6]
<strong>输出：</strong>3
<strong>解释：</strong>
中心下标是 3 。
左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，
右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。
</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>nums = [1, 2, 3]
<strong>输出：</strong>-1
<strong>解释：</strong>
数组中不存在满足此条件的中心下标。</pre>
<p><strong>示例 3：</strong></p>
<pre><strong>输入：</strong>nums = [2, 1, -1]
<strong>输出：</strong>0
<strong>解释：</strong>
中心下标是 0 。
左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），
右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。</pre>
<h3 id="mcetoc_1i5srl6etu">代码</h3>
<pre class="language-c line-numbers"><code>int pivotIndex(int* nums, int numsSize) {
    int totalSum = 0;
    for (int i = 0; i &lt; numsSize; i++) {
        totalSum += nums[i];
    }
    
    int leftSum = 0;
    for (int i = 0; i &lt; numsSize; i++) {
        if (leftSum == totalSum - leftSum - nums[i]) {
            return i;
        }
        leftSum += nums[i];
    }
    
    return -1;
}</code></pre>
<h3 id="mcetoc_1i5srl6etv">解释</h3>
<ol>
<li><strong>总和计算</strong>：首先通过遍历数组来计算 <code>totalSum</code>。</li>
<li><strong>遍历数组</strong>：我们用 <code>leftSum</code> 来表示当前下标 <code>i</code> 左边所有元素的和。</li>
<li><strong>中心下标判断</strong>：对于每一个下标 <code>i</code>，判断 <code>leftSum</code> 是否等于右侧元素的和（<code>totalSum - leftSum - nums[i]</code>），如果是，则返回 <code>i</code>。</li>
<li><strong>继续更新 <code>leftSum</code></strong>：在判断完之后，我们把当前元素加到 <code>leftSum</code> 中，以便下一个下标使用。</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>2144. 打折购买糖果的最小开销</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/2144-da-zhe-gou-mai-tang-guo-de-zui-xiao-kai-xiao.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/2144-da-zhe-gou-mai-tang-guo-de-zui-xiao-kai-xiao.html</id>
            <category term="力扣"/>

        <updated>2024-08-21T07:20:03+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i5p1e3qur">题目</a></li>
<li><a href="#mcetoc_1i5p1e3qus">代码</a></li>
<li><a href="#mcetoc_1i5p1e3qut">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i5p1e3qur">题目</h3>
<p>一家商店正在打折销售糖果。每购买 <strong>两个</strong> 糖果，商店会 <strong>免费</strong> 送一个糖果。</p>
<p>免费送的糖果唯一的限制是：它的价格需要小于等于购买的两个糖果价格的 <strong>较小值</strong> 。</p>
<ul>
<li>比方说，总共有 <code>4</code> 个糖果，价格分别为 <code>1</code> ，<code>2</code> ，<code>3</code> 和 <code>4</code> ，一位顾客买了价格为 <code>2</code> 和 <code>3</code> 的糖果，那么他可以免费获得价格为 <code>1</code> 的糖果，但不能获得价格为 <code>4</code> 的糖果。</li>
</ul>
<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 表示第 <code>i</code> 个糖果的价格，请你返回获得 <strong>所有</strong> 糖果的 <strong>最小</strong> 总开销。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>cost = [1,2,3]
<strong>输出：</strong>5
<strong>解释：</strong>我们购买价格为 2 和 3 的糖果，然后免费获得价格为 1 的糖果。
总开销为 2 + 3 = 5 。这是开销最小的 <strong>唯一</strong> 方案。
注意，我们不能购买价格为 1 和 3 的糖果，并免费获得价格为 2 的糖果。
这是因为免费糖果的价格必须小于等于购买的 2 个糖果价格的较小值。
</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>cost = [6,5,7,9,2,2]
<strong>输出：</strong>23
<strong>解释：</strong>最小总开销购买糖果方案为：
- 购买价格为 9 和 7 的糖果
- 免费获得价格为 6 的糖果
- 购买价格为 5 和 2 的糖果
- 免费获得价格为 2 的最后一个糖果
因此，最小总开销为 9 + 7 + 5 + 2 = 23 。
</pre>
<p><strong>示例 3：</strong></p>
<pre><strong>输入：</strong>cost = [5,5]
<strong>输出：</strong>10
<strong>解释：</strong>由于只有 2 个糖果，我们需要将它们都购买，而且没有免费糖果。
所以总最小开销为 5 + 5 = 10 。</pre>
<h3 id="mcetoc_1i5p1e3qus">代码</h3>
<pre class="language-c line-numbers"><code>// 比较函数，用于qsort排序
int compare(const void* a, const void* b) {
    return *(int*)b - *(int*)a; // 从大到小排序
}

int minimumCost(int* cost, int costSize) {
    // 按价格从大到小排序
    qsort(cost, costSize, sizeof(int), compare);
    
    int totalCost = 0;
    
    // 遍历所有糖果，每次取3个
    for (int i = 0; i &lt; costSize; i++) {
        // 只累加前两个糖果的价格，第三个糖果免费
        if (i % 3 != 2) {
            totalCost += cost[i];
        }
    }
    
    return totalCost;
}</code></pre>
<h3 id="mcetoc_1i5p1e3qut">解释</h3>
<ol>
<li><strong>排序</strong>：<code>qsort</code>函数将糖果价格从高到低排序。</li>
<li><strong>遍历</strong>：在循环中，通过 <code>i % 3 != 2</code> 来判断是否是每组中的第三个糖果，若是，则跳过它（因为它是免费的）。</li>
<li><strong>累加价格</strong>：每组前两个糖果的价格累加到 <code>totalCost</code> 中。</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>989. 数组形式的整数加法</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/989-shu-zu-xing-shi-de-zheng-shu-jia-fa.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/989-shu-zu-xing-shi-de-zheng-shu-jia-fa.html</id>
            <category term="力扣"/>

        <updated>2024-08-20T07:25:10+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i5mfanpl15">题目</a></li>
<li><a href="#mcetoc_1i5mfanpl16">代码</a></li>
<li><a href="#mcetoc_1i5mfanpl17">解释</a></li>
</ul>
</div>
<h3 id="mcetoc_1i5mfanpl15">题目</h3>
<p>整数的 <strong>数组形式</strong>  <code>num</code> 是按照从左到右的顺序表示其数字的数组。</p>
<ul>
<li>例如，对于 <code>num = 1321</code> ，数组形式是 <code>[1,3,2,1]</code> 。</li>
</ul>
<p>给定 <code>num</code> ，整数的 <strong>数组形式</strong> ，和整数 <code>k</code> ，返回 <em>整数 <code>num + k</code> 的 <strong>数组形式</strong></em> 。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>num = [1,2,0,0], k = 34
<strong>输出：</strong>[1,2,3,4]
<strong>解释：</strong>1200 + 34 = 1234
</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>num = [2,7,4], k = 181
<strong>输出：</strong>[4,5,5]
<strong>解释：</strong>274 + 181 = 455
</pre>
<p><strong>示例 3：</strong></p>
<pre><strong>输入：</strong>num = [2,1,5], k = 806
<strong>输出：</strong>[1,0,2,1]
<strong>解释：</strong>215 + 806 = 1021</pre>
<h3 id="mcetoc_1i5mfanpl16">代码</h3>
<pre class="language-c line-numbers"><code>int* addToArrayForm(int* num, int numSize, int k, int* returnSize) {
    // 分配足够大的空间存储结果数组
    int* result = (int*)malloc(sizeof(int) * (numSize + 10)); // 预留足够的空间处理进位
    int currentIndex = 0; // 用于存放结果数组的当前索引
    int carry = k; // 初始进位为 k
    int i;

    // 从 num 数组的末尾向前遍历
    for (i = numSize - 1; i &gt;= 0 || carry &gt; 0; i--) {
        if (i &gt;= 0) {
            carry += num[i]; // 将当前位的数字与进位相加
        }
        result[currentIndex++] = carry % 10; // 取个位作为当前结果位
        carry /= 10; // 更新进位
    }

    // 结果数组是逆序存储的，需要翻转
    for (i = 0; i &lt; currentIndex / 2; i++) {
        int temp = result[i];
        result[i] = result[currentIndex - i - 1];
        result[currentIndex - i - 1] = temp;
    }

    *returnSize = currentIndex; // 更新结果数组的大小
    return result; // 返回结果数组的指针
}</code></pre>
<h3 id="mcetoc_1i5mfanpl17">解释</h3>
<ul>
<li>
<p><strong>分配足够大的空间</strong>：由于进位的原因，结果数组可能比 <code>num</code> 长，因此分配 <code>numSize + 10</code> 的空间来容纳可能的额外位数。</p>
</li>
<li>
<p><strong>逐位相加</strong>：从 <code>num</code> 的最低位（数组末尾）开始，逐位将 <code>num</code> 的对应位与 <code>k</code> 的当前位相加，并处理进位。</p>
</li>
<li>
<p><strong>处理剩余的进位</strong>：在 <code>num</code> 数组遍历完后，如果还有进位，继续将进位加到结果中。</p>
</li>
<li>
<p><strong>翻转结果</strong>：由于结果是从最低位开始存储的，因此最后需要翻转数组才能得到正确的顺序。</p>
</li>
<li>
<p><strong>返回结果</strong>：返回计算得到的结果数组以及其大小。</p>
</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>面试题 17.10. 主要元素</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/mian-shi-ti-1710-zhu-yao-yuan-su.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/mian-shi-ti-1710-zhu-yao-yuan-su.html</id>
            <category term="力扣"/>

        <updated>2024-08-19T07:19:08+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i5jsiu2c11">题目</a></li>
<li><a href="#mcetoc_1i5jsiu2c12">代码</a></li>
<li><a href="#mcetoc_1i5jsiu2c13">Boyer-Moore 投票算法的详细解释</a>
<ul>
<li><a href="#mcetoc_1i5jsiu2c14">问题定义</a></li>
<li><a href="#mcetoc_1i5jsiu2c15">算法思想</a></li>
<li><a href="#mcetoc_1i5jsiu2c16">具体步骤</a></li>
<li><a href="#mcetoc_1i5jsiu2c17">为什么这个算法有效？</a></li>
</ul>
</li>
</ul>
</div>
<h3 id="mcetoc_1i5jsiu2c11">题目</h3>
<p>数组中占比超过一半的元素称之为主要元素。给你一个<strong> 整数 </strong>数组，找出其中的主要元素。若没有，返回 <code>-1</code> 。请设计时间复杂度为 <code>O(N)</code> 、空间复杂度为 <code>O(1)</code> 的解决方案。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<pre><strong>输入：</strong>[1,2,5,9,5,9,5,5,5]
<strong>输出：</strong>5</pre>
<p><strong>示例 2：</strong></p>
<pre><strong>输入：</strong>[3,2]
<strong>输出：</strong>-1</pre>
<p><strong>示例 3：</strong></p>
<pre><strong>输入：</strong>[2,2,1,1,1,2,2]
<strong>输出：</strong>2</pre>
<h3 id="mcetoc_1i5jsiu2c12">代码</h3>
<pre class="language-c line-numbers"><code>int majorityElement(int* nums, int numsSize) {
    int candidate = 0;
    int count = 0;
    
    // 第一遍遍历，找到候选人
    for (int i = 0; i &lt; numsSize; i++) {
        if (count == 0) {
            candidate = nums[i];
            count = 1;
        } else if (nums[i] == candidate) {
            count++;
        } else {
            count--;
        }
    }
    
    // 第二遍遍历，验证候选人是否为主要元素
    count = 0;
    for (int i = 0; i &lt; numsSize; i++) {
        if (nums[i] == candidate) {
            count++;
        }
    }
    
    // 判断是否是主要元素
    if (count &gt; numsSize / 2) {
        return candidate;
    } else {
        return -1;
    }
}
</code></pre>
<h3 id="mcetoc_1i5jsiu2c13">Boyer-Moore 投票算法的详细解释</h3>
<p>Boyer-Moore 投票算法是一种非常巧妙且高效的算法，用于在时间复杂度为 O(N) 且空间复杂度为 O(1) 的条件下找到数组中的主要元素。下面我们详细解释这个算法的工作原理和步骤。</p>
<h4 id="mcetoc_1i5jsiu2c14">问题定义</h4>
<p>主要元素是指在数组中出现次数超过一半的元素。给定一个大小为 <code>n</code> 的数组，主要元素出现的次数必须超过 <code>n/2</code>。</p>
<h4 id="mcetoc_1i5jsiu2c15">算法思想</h4>
<p>算法的核心思想是：</p>
<ol>
<li><strong>候选人筛选</strong>：我们需要找到一个“候选人”作为主要元素。通过一次遍历，我们可以确定一个候选人，这个候选人有可能是主要元素。</li>
<li><strong>验证候选人</strong>：由于筛选出来的候选人不一定是主要元素，我们需要通过第二次遍历来验证这个候选人是否真的出现次数超过数组的一半。</li>
</ol>
<h4 id="mcetoc_1i5jsiu2c16">具体步骤</h4>
<p><strong>第一步：候选人筛选</strong></p>
<ol>
<li>
<p>初始化两个变量：</p>
<ul>
<li><code>candidate</code>：用于记录当前的候选元素。</li>
<li><code>count</code>：用于记录当前候选元素的出现次数。</li>
</ul>
</li>
<li>
<p>遍历整个数组：</p>
<ul>
<li>如果 <code>count</code> 为 <code>0</code>，表示当前没有候选人或前一个候选人已经被“淘汰”。此时将当前元素设置为新的候选人，并将 <code>count</code> 设为 <code>1</code>。</li>
<li>如果当前元素与 <code>candidate</code> 相同，则说明这个元素支持当前的候选人，增加 <code>count</code>。</li>
<li>如果当前元素与 <code>candidate</code> 不同，则认为这是一个反对票，减少 <code>count</code>。</li>
</ul>
</li>
</ol>
<p>通过上述遍历，我们可以找到一个最终的候选人 <code>candidate</code>。这个候选人有可能是主要元素，但我们还需要验证。</p>
<p><strong>第二步：验证候选人</strong></p>
<ol>
<li>初始化 <code>count</code> 为 <code>0</code>，然后再遍历数组。</li>
<li>每遇到一个与 <code>candidate</code> 相同的元素，就增加 <code>count</code>。</li>
<li>最后检查 <code>count</code> 是否大于 <code>n/2</code>：
<ul>
<li>如果是，说明 <code>candidate</code> 是主要元素，返回它。</li>
<li>如果不是，说明数组中没有主要元素，返回 <code>-1</code>。</li>
</ul>
</li>
</ol>
<h4 id="mcetoc_1i5jsiu2c17">为什么这个算法有效？</h4>
<p>要理解为什么这个算法有效，我们可以从以下角度来分析：</p>
<ul>
<li>
<p><strong>筛选过程的有效性</strong>：当 <code>count</code> 变为 <code>0</code> 时，表示我们目前没有候选人或之前的候选人已经被完全抵消（即遇到了足够多的不同元素来平衡掉候选人）。此时，我们选择当前的元素作为新的候选人。由于主要元素的数量超过总数的一半，它不可能被完全抵消，因此最终得到的候选人要么是主要元素，要么是非主要元素。</p>
</li>
<li>
<p><strong>验证过程的必要性</strong>：由于第一次筛选过程仅能保证筛选出一个潜在的候选人，因此我们需要第二次遍历来确认它是否真的出现次数超过一半。如果 <code>count</code> 大于 <code>n/2</code>，则它就是主要元素。</p>
</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>1252. 奇数值单元格的数目</title>
        <author>
            <name>fcoy</name>
        </author>
        <link href="https://hxfcoy.github.io/xcll.github.io/1252-qi-shu-zhi-dan-yuan-ge-de-shu-mu.html"/>
        <id>https://hxfcoy.github.io/xcll.github.io/1252-qi-shu-zhi-dan-yuan-ge-de-shu-mu.html</id>
            <category term="力扣"/>

        <updated>2024-08-18T07:57:58+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                <div class="post__toc">
<h3>目录</h3>
<ul>
<li><a href="#mcetoc_1i5hcdbnu1h">题目</a></li>
<li><a href="#mcetoc_1i5hcdbnu1i">代码</a></li>
<li><a href="#mcetoc_1i5hcdbnu1j">代码说明</a></li>
<li><a href="#mcetoc_1i5hcdbnu1k">参数说明</a></li>
</ul>
</div>
<h3 id="mcetoc_1i5hcdbnu1h">题目</h3>
<p>给你一个 <code>m x n</code> 的矩阵，最开始的时候，每个单元格中的值都是 <code>0</code>。</p>
<p>另有一个二维索引数组 <code>indices</code>，<code>indices[i] = [ri, ci]</code> 指向矩阵中的某个位置，其中 <code>ri</code> 和 <code>ci</code> 分别表示指定的行和列（<strong>从 <code>0</code> 开始编号</strong>）。</p>
<p>对 <code>indices[i]</code> 所指向的每个位置，应同时执行下述增量操作：</p>
<ol>
<li><code>r<sub>i</sub></code> 行上的所有单元格，加 <code>1</code> 。</li>
<li><code>c<sub>i</sub></code> 列上的所有单元格，加 <code>1</code> 。</li>
</ol>
<p>给你 <code>m</code>、<code>n</code> 和 <code>indices</code> 。请你在执行完所有 <code>indices</code> 指定的增量操作后，返回矩阵中 <strong>奇数值单元格</strong> 的数目。</p>
<p> </p>
<p><strong>示例 1：</strong></p>
<p><img loading="lazy" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/06/e1.png" alt="" data-is-external-image="true"></p>
<pre><strong>输入：</strong>m = 2, n = 3, indices = [[0,1],[1,1]]
<strong>输出：</strong>6
<strong>解释：</strong>最开始的矩阵是 [[0,0,0],[0,0,0]]。
第一次增量操作后得到 [[1,2,1],[0,1,0]]。
最后的矩阵是 [[1,3,1],[1,3,1]]，里面有 6 个奇数。
</pre>
<p><strong>示例 2：</strong></p>
<p><img loading="lazy" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/06/e2.png" alt="" data-is-external-image="true"></p>
<pre><strong>输入：</strong>m = 2, n = 2, indices = [[1,1],[0,0]]
<strong>输出：</strong>0
<strong>解释：</strong>最后的矩阵是 [[2,2],[2,2]]，里面没有奇数。</pre>
<h3 id="mcetoc_1i5hcdbnu1i">代码</h3>
<pre class="language-c line-numbers"><code>int oddCells(int m, int n, int** indices, int indicesSize, int* indicesColSize) {
    // 初始化行和列的增量计数
    int* row_count = (int*)calloc(m, sizeof(int));
    int* col_count = (int*)calloc(n, sizeof(int));
    
    // 对每个 indices 中的 (ri, ci) 进行操作
    for (int i = 0; i &lt; indicesSize; i++) {
        int ri = indices[i][0];
        int ci = indices[i][1];
        row_count[ri]++;
        col_count[ci]++;
    }
    
    // 计算奇数值单元格的数量
    int odd_count = 0;
    for (int i = 0; i &lt; m; i++) {
        for (int j = 0; j &lt; n; j++) {
            // 计算当前单元格的值
            int value = row_count[i] + col_count[j];
            if (value % 2 == 1) {
                odd_count++;
            }
        }
    }
    
    // 释放动态分配的内存
    free(row_count);
    free(col_count);
    
    return odd_count;
}</code></pre>
<h3 id="mcetoc_1i5hcdbnu1j">代码说明</h3>
<ol>
<li><strong>内存分配</strong>：使用 <code>calloc</code> 分别为 <code>row_count</code> 和 <code>col_count</code> 动态分配内存，并将其初始值设置为 0。</li>
<li><strong>操作增量</strong>：对每个索引 <code>[ri, ci]</code>，增加对应行和列的计数。</li>
<li><strong>计算奇数单元格</strong>：通过遍历每个单元格，计算其对应的行列增量和，如果结果是奇数，增加计数。</li>
<li><strong>释放内存</strong>：最后使用 <code>free</code> 释放动态分配的内存。</li>
</ol>
<h3 id="mcetoc_1i5hcdbnu1k">参数说明</h3>
<ul>
<li><code>m</code>：矩阵的行数。</li>
<li><code>n</code>：矩阵的列数。</li>
<li><code>indices</code>：二维索引数组。</li>
<li><code>indicesSize</code>：<code>indices</code> 数组的行数（即索引对的数量）。</li>
<li><code>indicesColSize</code>：每一行索引数组的列数（始终为 2）。</li>
</ul>
            ]]>
        </content>
    </entry>
</feed>
